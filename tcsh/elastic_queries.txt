# -----------------------------------------------------------------------------

# The format of a command entry starts with the name on a single line ending 
# with a ':'. 
# 
# If the API required is not '_search', then the next line is 'API=...' where 
# the endpoint gets specified. Any options can be placed after the endpoint as
# per the usual REST syntax (Eg. '?conflicts=proceed&pretty')
#
# Any strings that need substitution are labelled ARG1, ARG2, ... ARGX
#
# -----------------------------------------------------------------------------

delete_children:
API=_delete_by_query
{
  "query": {
    "has_parent": {
      "parent_type": "metadata",
      "query": {
        "term": {
          "Uri": { "value": "ARG1" }
        }
      }
    }
  }
}

# -------------------------------------------------------------

# For any query below that does not specify an 'API=...' line, 
# they default to using _search

# -------------------------------------------------------------

field_exists: 
{ 
  "_source": false, 
  "query" : {
    "exists" : { 
       "field" : "ARG1" 
    }
  }, 
  "size" : 10000 
}

# ------------------------------------------------

get_record_content:
{
  "_source": "Document.Content",
  "query": {
    "has_parent": {
      "parent_type": "metadata",
      "query": {
        "term": {
          "_id": {
            "value": "ARG1"
          }
        }
      }
    }
  },
  "size": 100
}

search_content_phrase:
{
  "_source": false,
  "query": {
    "query_string": {
      "analyze_wildcard": true,
      "default_operator": "AND",
      "quote_field_suffix": ".phrase",
      "query": "Document.Content:(\"ARG1\")"
    }
  },
  "size": 100
}

# ------------------------------------------------

search_record_content:
{
  "_source": false,
  "query": {
    "bool": {
      "must": [
        { 
          "term": { 
            "ObjectType": "Record" 
          }
        },
        {
          "has_child": {
            "type": "content",
            "query": {
              "query_string": {
                "analyze_wildcard" : true,
                "default_operator" : "AND",
                "quote_field_suffix" : ".phrase",
                "query": "Document.Content:(ARG1)"
              }
            }
          }
        }
      ]
    }
  },
  "size": 100
}

search_record_content_phrase:
{
  "_source": false,
  "query": {
    "bool": {
      "must": [
        {
          "term": {
            "ObjectType": "Record"
          }
        },
        {
          "has_child": {
            "type": "content",
            "query": {
              "query_string": {
                "analyze_wildcard" : true,
                "default_operator" : "AND",
                "quote_field_suffix" : ".phrase",
                "query": "Document.Content:(\"ARG1\")"
              }
            }
          }
        }
      ]
    }
  },
  "size": 100
}

# ------------------------------------------------

not_search_record_content:
{
  "_source": false,
  "query": {
    "bool": {
      "must": [
        { 
          "term": { 
            "ObjectType": "Record" 
          }
        }
      ],
      "must_not": [
        {
          "has_child": {
		    "type": "content",
            "query": {
		      "query_string": {
                "analyze_wildcard" : true,
                "default_operator" : "AND",
                "quote_field_suffix" : ".phrase",
                "query": "Document.Content:(ARG1)"
			  }
	        }
	      }
        }
      ]
    }
  },
  "size": 100
}

not_search_record_content_phrase:
{
  "_source": false,
  "query": {
    "bool": {
      "must": [
        {
          "term": {
            "ObjectType": "Record"
          }
        }
      ],
      "must_not": [
        {
          "has_child": {
            "type": "content",
            "query": {
              "query_string": {
                "analyze_wildcard" : true,
                "default_operator" : "AND",
                "quote_field_suffix" : ".phrase",
                "query": "Document.Content:(\"ARG1\")"
              }
            }
          }
        }
      ]
    }
  },
  "size": 100
}

# ------------------------------------------------

match_all:
{
  "_source": false,
  "query" : {
    "match_all" : {}
  },
  "size" : 10000
}

# ------------------------------------------------

get_field:
{
  "size" : 10000,
  "_source": "ARG1",
  "query" : {
    "exists" : { 
      "field" : "ARG1"
    }
  }
}

# ------------------------------------------------

current_defects:
{
  "_source": [
    "name",
    "closed_on",
    "_release",
    "_severity",
    "_defect_type",
    "_detected_in_release",
    "_qa_owner",
    "last_modified",
    "_priority",
    "_phase"
  ],
  "query": {
    "bool": {
      "should": [
        {
          "query_string": {
            "query": "_owner:(ARG1) AND NOT _phase:(closed rejected duplicate fixed)"
          }
        },
        {
          "query_string": {
            "query": "_qa_owner:(ARG1) AND NOT _phase:(closed rejected duplicate)"
          }
        }
      ]
    }
  },
  "sort": [
    {
      "_release.keyword": {
        "order": "asc"
      }
    }
  ],
  "size": 100
}

# ------------------------------------------------

current_defects_ORIGINAL:
{
  "_source":[
  	"name",
  	"closed_on",
  	"_release",
  	"_severity",
  	"_defect_type",
  	"_detected_in_release",
  	"_qa_owner",
  	"last_modified",
  	"_priority",
  	"_phase"
  ],
  "query": {
    "bool": {
      "must": {
        "match": {"_owner": "ARG1"}
      }, 
      "must_not": [
      { "term": { "_phase": "closed" } },
      { "term": { "_phase": "rejected" } },
      { "term": { "_phase": "duplicate" } },
      { "term": { "_phase": "fixed" } }
      ]
    }
  },
  "sort": [
    {
      "_release.keyword": {
        "order": "asc"
      }
    }
  ], 
  "size": 100
}

# ------------------------------------------------


defects_by_release:
{
  "_source":[
  	"name",
  	"closed_on",
  	"_release",
  	"_severity",
  	"_defect_type",
  	"_detected_in_release",
  	"_qa_owner",
  	"last_modified",
  	"_priority",
  	"_phase"
  ],
  "query": {
    "bool": {
      "must":
       [
		   { "match": {"_owner": "ARG1"}},
		   { "match": {"_release.keyword": "ARG2"}}
       ]
    }
  },
  "sort": [
    {
      "name.keyword": {
        "order": "asc"
      }
    }
  ], 
  "size": 500
}

# ------------------------------------------------

all_defects:
{
  "_source":[
  	"name",
  	"closed_on",
  	"_release",
  	"_severity",
  	"_defect_type",
  	"_detected_in_release",
  	"_qa_owner",
  	"last_modified",
  	"_priority",
  	"_phase"
  ],
  "query": {
    "bool": {
      "must": {
        "match": {"_owner": "ARG1"}
      }
    }
  },
  "sort": [
    {
      "_release.keyword": {
        "order": "asc"
      }
    }
  ], 
  "size": 500
}

# ------------------------------------------------

search_defect_by_title:
{
  "_source":[
  	"name",
  	"closed_on",
  	"_release",
  	"_severity",
  	"_defect_type",
  	"_detected_in_release",
  	"_qa_owner",
  	"last_modified",
  	"_priority",
  	"_phase"
  ],
  "query": {
     "match_phrase": { "name": "ARG1" }
  },
  "sort": [
    {
      "_release.keyword": {
        "order": "asc"
      }
    }
  ], 
  "size": 1000
}

# ------------------------------------------------

search_defect_by_legacy_id:
{
 "_source":[
    "name",
    "legacy_id_udf"
  ],
  "query": {
     "wildcard": {
       "legacy_id_udf": "*ARG1"
     }
  },
  "size": 1000
}

# ------------------------------------------------

reindex_octane:
API=_reindex
{
  "max_docs": 1000000,
  "conflicts": "proceed", 
  "source": {
    "index": "octane_new",
    "_source": [
      "_author",
      "_comments",
      "_defect_type",
      "_detected_by",
      "_detected_in_release",
      "_exists_in_release_udf",
      "_last_modifier_udf",
      "_owner",
      "_phase",
      "_priority",
      "_product_areas",
      "_qa_owner",
      "_regression_udf",
      "_release",
      "_severity",
      "_team",
      "closed_on",
      "creation_time",
      "customer_encountered_udf",
      "customer_resolution_udf",
      "customer_visible_udf",
      "depends_on_ids_udf",
      "description",
      "detected_in_build_udf",
      "duplicate_of_udf",
      "fixed_on_date_udf",
      "global_id_udf",
      "has_attachments",
      "has_comments",
      "id",
      "last_modified",
      "legacy_id_udf",
      "name",
      "source_ids_udf",
      "svn_reference_udf",
      "technical_resolution_udf",
      "workaround_udf"
      ],
    "query" : { 
      "match_all" : {}
    }
  },
  "dest": {
    "index": "octane",
    "version_type": "external"
  },
   "script": {
    "source": """
  ctx._source.author               = ctx._source.remove('_author');
  ctx._source.comments             = ctx._source.remove('_comments');
  ctx._source.defect_type          = ctx._source.remove('_defect_type');
  ctx._source.detected_by          = ctx._source.remove('_detected_by');
  ctx._source.detected_in_release  = ctx._source.remove('_detected_in_release');
  ctx._source.exists_in_release    = ctx._source.remove('_exists_in_release_udf');
  ctx._source.last_modifier        = ctx._source.remove('_last_modifier_udf');
  ctx._source.owner                = ctx._source.remove('_owner');
  ctx._source.phase                = ctx._source.remove('_phase');
  ctx._source.priority             = ctx._source.remove('_priority');
  ctx._source.product_areas        = ctx._source.remove('_product_areas');
  ctx._source.qa_owner             = ctx._source.remove('_qa_owner');
  ctx._source.regression           = ctx._source.remove('_regression_udf');
  ctx._source.release              = ctx._source.remove('_release');
  ctx._source.severity             = ctx._source.remove('_severity');
  ctx._source.team                 = ctx._source.remove('_team');
  ctx._source.customer_encountered = ctx._source.remove('customer_encountered_udf');
  ctx._source.customer_resolution  = ctx._source.remove('customer_resolution_udf');
  ctx._source.customer_visible     = ctx._source.remove('customer_visible_udf');
  ctx._source.depends_on_ids       = ctx._source.remove('depends_on_ids_udf');
  ctx._source.detected_in_build    = ctx._source.remove('detected_in_build_udf');
  ctx._source.duplicate_of         = ctx._source.remove('duplicate_of_udf');
  ctx._source.fixed_on_date        = ctx._source.remove('fixed_on_date_udf');
  ctx._source.global_id            = ctx._source.remove('global_id_udf');
  ctx._source.legacy_id            = ctx._source.remove('legacy_id_udf');
  ctx._source.source_ids           = ctx._source.remove('source_ids_udf');
  ctx._source.svn_reference        = ctx._source.remove('svn_reference_udf');
  ctx._source.technical_resolution = ctx._source.remove('technical_resolution_udf');
  ctx._source.workaround           = ctx._source.remove('workaround_udf');
"""
  }
}

# ------------------------------------------------
# ------------------------------------------------
# ------------------------------------------------
# ------------------------------------------------
