#
#      alias x  ' echo "some stuff here" | perl -ne ' "'" ' /(stuff)/ and do { print "$1\n" }  ' "'"
#      perl -ne ' "'" '   ...   ' "'"
#

set prompt="%B%n %~>"
set autologout
set alias_file = $alias_dir/aliases_common.txt

#set path = ( "/c/program files/TortoiseSVN/bin" /c/strawberry/perl/bin /c/python27 /c/rakudo/bin /bin /usr/bin /sbin /usr/sbin $path:q )
set path = ( "/c/program files/TortoiseSVN/bin" /c/Strawberry/perl/bin /bin /usr/bin /sbin /usr/sbin $path:q )

# Always set the drive prefix to just /, not "/cygdrive"
# This has now been configured in /etc/fstab, so no need to do it here
#mount --change-cygdrive-prefix /

set STATIC_REPO = $REPOS_ROOT":/TRIMStaticRepo"
set STATIC_PERL = $REPOS_ROOT":/TRIMStaticRepo/libs/Perl"

set trimdir       = $REPOS_ROOT":/$revision"$defPatch
set dbDefault     = Test_"$revision"_SqlServer
set dbDefServer   = $LOCAL_SQLSVR

if (! $?dbSession) then       
  set dbSession   = $dbDefault
else
  if ("$dbSession" == "")  then
     set dbSession   = $dbDefault
  endif
endif

if (! $?dbServer) then       
  set dbServer   = $dbDefServer
else
  if ("$dbServer" == "")  then
     set dbServer   = $dbDefServer
  endif
endif

#  Need to define this early so we can look up the dataset ID
alias dbpl        "perl $STATIC_PERL/db/db.pl --server $dbServer --database $dbSession"
alias dbid        "dbpl --get_dbid"

if ("$LOCAL_SQLSVR" == "$dbServer") then
  set DBID = `dbid`
endif

set cygtrimdir    = "/$REPOS_ROOT/$revision"$defPatch
set idolDb        = TRIM_"$DBID"
set trimcfgdir    = "$trimdir/trim/SharedTrimServerData/ServerData"
set currentEnv    = $alias_dir/"$revision"environment


alias get_title 'xprop -id ${WINDOWID}  | perl -e ' "'" ' while(<>){ if(/^WM_NAME.+= \"(.*)\"$/) {$t=$1} }  print "TITLE = $t\n"   ' "'" 
alias clear_title 'echo -n "\033]0;xterm\007" '
alias xterm_title   'echo -n "\033]0;\!^\007" '
#alias settitle 'echo -n "${WINDOWID}\t${trimdir}\t${defArch}\t${defBuild}\t${DBID}" |  perl -ne ' "'" ' chomp; @in = split /\t/; @out = `xprop -id $in[0]`;  for(@out){/^WM_NAME.+=\s+\"(.*)\"$/ and do {$N=$1};} $N=~ s/\s+REL.+ARCH.+BUILD.+DBID.+$//; system("echo","-n","\033]0;$N         REL=$in[1], ARCH=$in[2], BUILD=$in[3], DBID=$in[4]\007");          ' "'"

alias settitle    'echo -ne "\033]0;         REL=${trimdir} ARCH=${defArch}, BUILD=${defBuild}, DBID=${DBID}, DBSESSION=${dbSession}, DBSERVER=${dbServer}\007"'
alias settitledir 'echo -ne "\033]0;         REL=${trimdir} ARCH=${defArch}, BUILD=${defBuild}, DBID=${DBID}    `/bin/pwd`\007"'

# Allow a different standard path for devenv.exe
if ("$DEVENV_ROOT" == "") then
  set DEVENV_ROOT = "C:/Program Files (x86)"
endif

#if ($defCompiler == "VS2010" && $DBID == "C1") then
#    if ($defArch == "x86") then
#        set defArch = "x86_2010"; settitle
#    else
#        set defArch = "x64_2010"; settitle
#    endif
#endif

set defArchCSharp = "AnyCPU"
if ($defCompiler == "VS2008") then
    set defArchCSharp = $defArch
endif

set defproj = ALL_BUILD

alias home 	"cd $WIN_HOME"
alias via  	"vi $alias_file"
alias viewa  	"vi -R $alias_file"
alias viw       "vi $alias_dir/aliases_work.txt"
alias vih       "vi $alias_dir/aliases_home.txt"
alias vs2012    "set defCompiler = VS2012; source $alias_file"
alias vs2008    "set defCompiler = VS2008; source $alias_file"
alias x86  	"set defArch = x86; source $alias_file; settitle"
alias x64  	"set defArch = x64; source $alias_file; settitle"
alias debug  	"set defBuild = Debug; source $alias_file; settitle"
alias release  	"set defBuild = Release; source $alias_file; settitle"
alias rtm       "set defPatch = _RTM; set defBuild = Release; source $alias_file; settitle"
alias hf1       "set defPatch = _HF1; set defBuild = Release; source $alias_file; settitle"
alias hf2       "set defPatch = _HF2; set defBuild = Release; source $alias_file; settitle"
alias p1        "set defPatch = _P1; set defBuild = Release; source $alias_file; settitle"
alias p2        "set defPatch = _P2; set defBuild = Release; source $alias_file; settitle"
alias dbdefault "set dbSession = $dbDefault; set dbServer = $dbDefServer; source $alias_file; settitle"
alias dbcurrent echo $dbSession
alias dbsession "set dbSession = \!^; source $alias_file; settitle"
alias dbserver  "set dbServer = \!^; source $alias_file; settitle"
alias src       "source $alias_file"
set dbDefault     = Test_"$revision"_SqlServer
alias src73     "source $alias_dir/73environment; dbsession Test_73_SqlServer; "
alias src80     "source $alias_dir/80environment; dbsession Test_80_SqlServer; "
alias src81     "source $alias_dir/81environment; dbsession Test_81_SqlServer; "
alias src82     "source $alias_dir/82environment; dbsession Test_82_SqlServer; "
alias src83     "source $alias_dir/83environment; dbsession Test_83_SqlServer; "
alias src90     "source $alias_dir/90environment; dbsession Test_90_SqlServer; "
alias src91     "source $alias_dir/91environment; dbsession Test_91_SqlServer; "
alias src92     "source $alias_dir/92environment; dbsession Test_92_SqlServer; "
alias whichenv  "echo 'TRIMDIR   = $trimdir';          \\
                 echo 'ARCH      = $defArch';          \\
                 echo 'BUILD     = $defBuild';         \\
                 echo 'DBID      = $DBID';             \\
                 echo 'DBSession = $dbSession';        \\
                 echo 'DBServer  = $dbServer';         \\
                 echo 'IDOLDB    = $idolDb';           \\
                 echo 'SVNLOGDB  = $SVN_STATIC_DB';       \\
"
alias showenv  whichenv
alias trimversion "cat $trimdir/trim/wix/version.wxi | grep -i 'version ='"
set trimcfg = "$trimcfgdir/TRIMconfig.tcfg"

set autocorrect=1
set autolist=ambiguous
unset autologout
set complete=enhance
set correct=cmd
set echo_style=both
set ellipsis
set fignore=(.o \~)
set histdup=erase
set history=50000
set histfile=~/.history
set savehist=( $history merge )
unset ignoreeof
set listjobs=long
set listmaxrows=23
#set noglob
set notify=1
set rmstar=1
set showdots=1
set symlinks=expand

# Tell less to leave the output displayed
setenv LESS "-X"

# Set directory colours
setenv LS_COLORS 'no=00:fi=00:di=01;34:ln=01;36:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:su=37;41:sg=30;43:tw=30;42:ow=34;42:st=37;44:ex=01;32:*.tar=01;31:*.tgz=01;31:*.arj=01;31:*.taz=01;31:*.lzh=01;31:*.zip=01;31:*.z=01;31:*.Z=01;31:*.gz=01;31:*.bz2=01;31:*.bz=01;31:*.tbz2=01;31:*.tz=01;31:*.deb=01;31:*.rpm=01;31:*.jar=01;31:*.rar=01;31:*.ace=01;31:*.zoo=01;31:*.cpio=01;31:*.7z=01;31:*.rz=01;31:*.jpg=01;35:*.jpeg=01;35:*.gif=01;35:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.mng=01;35:*.pcx=01;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.m2v=01;35:*.mkv=01;35:*.ogm=01;35:*.mp4=01;35:*.m4v=01;35:*.mp4v=01;35:*.vob=01;35:*.qt=01;35:*.nuv=01;35:*.wmv=01;35:*.asf=01;35:*.rm=01;35:*.rmvb=01;35:*.flc=01;35:*.avi=01;35:*.fli=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.yuv=01;35:*.aac=00;36:*.au=00;36:*.flac=00;36:*.mid=00;36:*.midi=00;36:*.mka=00;36:*.mp3=00;36:*.mpc=00;36:*.ogg=00;36:*.ra=00;36:*.wav=00;36:'


alias lc  "ls --color"
alias ll  "ls --color -l"
alias lt  "ls --color -lt"
alias la  "ls --color -al"
alias lat "ls --color -alt"
alias ++ pushd
alias -- popd
alias d dirs
alias h history
alias j jobs

alias display "setenv DISPLAY :0.0"
alias disp1 "setenv DISPLAY :1.0"
alias d "setenv | grep DISPLAY"
alias newpath  'setenv PATH "\!^:$PATH"'

alias lh "ll -t \!^ | head "
alias head10 "ll -t | head "
alias head20 "ll -t | head -20"
alias head30 "ll -t | head -30"
alias headt "ll -t | head -\!^"

alias findalias "alias | grep -i "
alias falias findalias

alias fileinfo "7z l"
alias checkfile fileinfo


#################################################################################
#  JOURNAL ALIASES

# Set the $DATE variable to allow creation of new journal files
set DATE = `date +%B%Y`

alias gowikij         "cd $WIKI_DIR"
alias goproj          "cd $WIKI_DIR/projects"
alias grepj           "grep \!^ `cat /c/tmp/journalname.txt`"
alias vijournal       "vi $WIKI_DIR/journal.txt; scrub $WIKI_DIR/journal.txt"
alias vip             "vi $JOURNAL_DIR/DIARY.txt; scrub $JOURNAL_DIR/DIARY.txt"

alias grepjd          ' ls $WIKI_DIR/journals/*/*                                                                       \\
| /bin/perl -e '"'"'                                                                                                    \\
%m = (jan,"01",feb,"02",mar,"03",apr,"04",may,"05",jun,"06",jul,"07",aug,"08",sep,"09","oct",10,nov,11,dec,12);         \\
my $match=join "|", keys %m;                                                                                            \\
    while(<>){                                                                                                          \\
      chomp;                                                                                                            \\
      if(/($match).*(\d\d\d\d).txt$/){                                                                                  \\
        $mon=$m{$1};                                                                                                    \\
        $y=$2;                                                                                                          \\
        $ordered{"$y$mon"} = $_;                                                                                        \\
      }                                                                                                                 \\
    }                                                                                                                   \\
   for(sort {$b<=>$a} keys %ordered){                                                                                   \\
     print "$ordered{$_}\n";                                                                                            \\
   }                                                                                                                    \\
 '"'"
alias search          "grep -i \!^ `grepjd` | perl -ne 's|$WIKI_DIR/||; print'"   

alias mkjourn         'echo "$DATE $WIKI_DIR"                                     \\
| perl -ne '"'"'                                                                  \\
  chomp;                                                                          \\
  /^(\w+)(\d{4}) (.+)$/ and do {                                                  \\
     $m= lc $1;                                                                   \\
     $y=$2;                                                                       \\
     $path=$3;                                                                    \\
     print "$path/journals/$y/$m$y.txt"                                           \\
  } ' "' "'                                                                       \\
> /c/tmp/journalname.txt; source ${currentEnv}'

alias rmjourn         "rm /c/tmp/journalname.txt"
alias newjourn        "rmjourn; mkjourn"
alias scrub           "perl $PERL_BIN/scrub.pl --file"
alias tailj           "tail -50 `cat /c/tmp/journalname.txt`"
alias tjournal        "tail `cat /c/tmp/journalname.txt`"
alias vij             "vi `cat /c/tmp/journalname.txt`; scrub  `cat /c/tmp/journalname.txt`"
alias viwiki          "vi \!^; scrub  \!^"
alias mj              "less `cat /c/tmp/journalname.txt`; scrub  `cat /c/tmp/journalname.txt`"
alias textpad	      "TextPad.exe"

alias vj              ' echo -n "\!* $WIKI_DIR" | /bin/perl -ne  '"'"'                                                        \\
     /^([A-z]+)\s*(\d+) (.+)/ and do { ($m,$y,$path) = ($1,$2,$3) };                                                          \\
     foreach("january","february","march","april","may","june","july","august","september","october","november","december"){  \\
         if($_ =~ /^$m/i) { $month = $_; last; }                                                                              \\
     }                                                                                                                        \\
     if($y =~ /^\d{2}$/) { $y = "20".$y };                                                                                    \\
     if($y !~ /^\d{4}$/) { print "BAD YEAR: $y\n"; exit }                                                                     \\
     $file = "$path/journals/$y/$month$y.txt";                                                                                \\
     if(not -e $file) { print "File $file doesnt exist?\n"; exit; }                                                           \\
     print "cat $path/journals/$y/$month$y.txt";                                                                              \\
 ' "' "' | /bin/sh | vim -R - '

alias vibulk          "goproj; vi BulkLoader.txt; scrub BulkLoader.txt"


#################################################################################
# Following assumes that /c/rakudo/bin is on the path
alias perl6 perl6.bat

#  In order for updatedb to work with the program files directories, create the following links;
#
#    /c>ln -s Program\ Files programfiles
#    /c>ln -s Program\ Files\ \(x86\) programfilesx86
#
#  You must also make sure that the cygdrive prefix has been setup correctly in /etc/fstab, namely;
#
#    none / cygdrive binary,posix=0,user 0 0
#
alias update "updatedb --findoptions='-follow' --output='/home/plibauer/locatedb' --localpaths='$cygtrimdir $cygtrimdir/../TRIMStaticRepo /c/strawberry /c/programfiles /c/programfilesx86 /bin /etc /home /lib /usr /var /c/Users /c/Windows '"

alias locate   "locate -d ~/locatedb"
alias locatei  "locate -i -d ~/locatedb"
alias loc       locate
alias loci	locatei
alias trimfind   "loc \!^ | grep -i $cygtrimdir"
alias trimfindi  "loci \!^ | grep -i $cygtrimdir"

alias flushdns "ipconfig /flushdns"
# -R turns off ANSI escape sequence rubbish
alias more less -R

set WINHOME = `cygpath $HOMEDRIVE$HOMEPATH`

alias goa		 cd ~/aliases/tcsh
alias gocfg              "cd $trimcfgdir"
alias goexe              "cd $trimdir/$defArch/$defBuild"
alias gobin              goexe
alias gocs               "cd $trimdir/$defArchCSharp/$defBuild"
alias goany              gocs
alias goanycpu           gocs
alias gomsi              "cd $trimdir/msi/$defArch/en-us"
alias gotest             "cd $trimdir/trim/test"
alias goauto             "cd $trimdir/Automation"
alias gosrc              "cd $trimdir/trim/src"
alias gocsharp           "cd $trimdir/trim/CSharp"
alias gosln              "cd $trimdir/trim/sln"
alias gotrim             "cd $trimdir/trim"
alias gotrimlog          "cd $trimdir/$defArch/$defBuild/ServerLocalData/Log"
alias gotrimdslog        "cd $WINHOME/AppData/Local/Hewlett-Packard/HP\ TRIM/Log"
alias gotrimconfig       "cd $trimdir/trim/SharedTrimServerData/ServerData"
alias gotrimlocalconfig  "cd $WINHOME/AppData/Roaming/Hewlett-Packard/HP\ TRIM/$DBID/Configuration"
alias golocal		 gotrimlocalconfig
alias goauto             "cd $trimdir/Automation"
alias gobulk             "cd $STATIC_REPO/TestData/BulkLoader/TestCases"
alias goblk              gobulk
alias gob                "cd $trimdir/trim/CSharp/TRIMBulkLoader"
alias golog              "pushd $trimdir/$defArch/$defBuild/ServerLocalData/Log"
alias gologs             golog
alias goaudit            "cd $trimdir/$defArch/$defBuild/ServerData/$DBID/AuditLogs"
alias shlog              showlog
alias gotmp              "cd /c/tmp"
alias godox              "cd $trimdir/xtra/Doxygen/runDoxygen"
alias gosmoke            "cd $trimdir/Automation/Smoketest"
alias goperl             "cd $STATIC_PERL"
alias gop                "cd $PERL_BIN"
alias goalm              "cd $ALM_DB"
alias gosvn              "cd $SVN_STATIC_DB"
alias gosetup            "cd $trimdir/trim/wix/Setup.exe"
alias gostatic 		 "cd $STATIC_REPO"
alias gowix              "cd $trimdir/trim/wix"
alias gowixbin           "cd $WIX_DIR/bin"
alias gopatch            "cd $trimdir/trim/wix/PatchGenerator"
alias gowin              "cd $WIN_HOME"
alias gowork             "cd $WINHOME/Work"
alias goworkh            "cd $WINHOME/Work/HPIT"
alias goserverdata       "cd  $cygtrimdir/trim/SharedTrimServerData/ServerData"
alias godownloads        "cd $WIN_HOME/Downloads"
alias goroam             "cd $WIN_HOME/AppData/Roaming/Hewlett-Packard/HP\ TRIM"
alias godropbox		 "cd $WIN_HOME/DropBox"
alias godrop		 godropbox
alias godropp            "cd $WIN_HOME/DropBox/Software/Scripts/Perl"

alias wixcopy  "$trimdir/trim/wix/COPY_LATEST_RELEASE_FILES.cmd"
alias trace    "tracert"
alias route    "route.exe"
alias addtrim  "route add 15.0.0.0 MASK 255.0.0.0 \!^ METRIC 26"
alias netstat  "NETSTAT.EXE"

alias x11  "cd /c/cygwin/usr/X11R6/bin"
#alias xt  "xterm -sb -sl 10000 -fg white -bg black -T \!^ &"
alias xt "/c/cygwin/bin/mintty.exe -i /Cygwin-Terminal.ico - &"
alias logs "golog; xt 'TRIMWorkgroupServer log';golog;  xt 'TRIMEvent log'; golog;  xt 'TRIMDCI log'"
 
alias evlog_clean "cat \!^ | grep -v 'No events waiting at workgroup' | grep -v 'processing  buffered events' > event_log.clean"

alias evlogfilt 'ls -t $trimdir/$defArch/$defBuild/ServerLocalData/Log/TRIMEvent* \\
 | head -1                                                                        \\
 | perl -ne '"'"' chomp; print "tail -f $_";  ' "' "'                             \\
 | /bin/sh                                                                        \\
 | egrep -iv                                                                      \\
"processing  buffered events|\\
No events waiting at workgroup" '

alias evlog 'ls -t $trimdir/$defArch/$defBuild/ServerLocalData/Log/TRIMEvent* | head -1 |  perl -ne '"'"' chomp; print "tail -f $_";  ' "' "' | /bin/sh '
alias idxlog 'ls -t $trimdir/$defArch/$defBuild/ServerLocalData/Log/IDX_$DBID* | head -1 |  perl -ne '"'"' chomp; print "tail -f $_";  ' "' "' | /bin/sh  '

alias refresh "C:/sysinternals/Bginfo.exe"

alias ff            "find . -name "
alias ifind         'find . -iname \!^\* '
alias pfind2k8      "perl $PERL_BIN/find_project_files.pl -s $trimdir/trim/sln/TRIM/$defArch/TRIM.sln"
alias pfind         "perl $PERL_BIN/find_project_files.vs2010.pl -s $trimdir/trim/sln/TRIM/$defArch/TRIM.sln"
alias projfind      pfind
alias pf pfind
alias pgrep          "grep --perl-regexp"
#
#
# These aliases will produce a command line that can be used to search unicode and ascii files simultaneously. Useful when searching Visual Studio source
alias grepunicode   'perl -e ' "'" ' $a1=$ARGV[0]; $a2=$ARGV[1]; $b=join ".", split //,$a1; print "pgrep -as \"$a1\|$b\" \*/\*\n" '"'  \!:1 \!:2  " 
alias grepunicodei  'perl -e ' "'" ' $a1=$ARGV[0]; $a2=$ARGV[1]; $b=join ".", split //,$a1; print "pgrep -ais \"$a1\|$b\" \*/\*\n" '"'  \!:1 \!:2  " 
alias grepuni       grepunicodei
#
#
alias messages      'cat $trimdir/trim/TRIMMessages.txt | pgrep -i '
alias trimmessages  "$trimdir/trim/TRIMMessages.exe"
alias properties    'cat $trimdir/trim/src/DD/properties.txt | pgrep -i '
alias viewprop      'view $trimdir/trim/src/DD/properties.txt'
alias propids       'cat $trimdir/trim/src/HP.HPTRIM.SDK/swig/PropertyIds.cs | pgrep -i '
alias propidx       'cat $trimdir/trim/src/Core/PRPpropertyFind.cpp | pgrep -i '

alias enums         'cat $trimdir/trim/src/HP.HPTRIM.SDK/swig/PropertyIds.cs  \\
| perl -e ' "'" '                                                             \\
while(<>){                                                                    \\
  if(/^\s*(\w+)\s*=\s*(\d+)\s*,/){                                            \\
    if($ids{$2}){                                                             \\
       print "DUPLICATE? => $2\n";                                            \\
       next;                                                                  \\
    }                                                                         \\
    $ids{$2}=$1;                                                              \\
  }                                                                           \\
}                                                                             \\
my $max = (reverse sort {$a<=>$b} keys %ids)[0];                              \\
for my $i (0 .. $max) {                                                       \\
  if($ids{$i}){                                                               \\
    print "$i\t".$ids{$i}."\n";                                               \\
  }                                                                           \\
  else {                                                                      \\
    print "$i\n";                                                             \\
  }                                                                           \\
}                                                                             \\
' "'"

alias database      'cat $trimdir/trim/src/DD/DATABASE.TXT | pgrep -i '
alias viewdb        'view $trimdir/trim/src/DD/DATABASE.TXT'
alias trimtables    'cat $trimdir/trim/src/DD/DATABASE.TXT                    \\
| perl -e ' "'" '                                                             \\
@in = <>;                                                                     \\
my %tables;                                                                   \\
my $max = 10;                                                                 \\
for(@in) {                                                                    \\
  chomp;                                                                      \\
  s/nouri//gi;                                                                \\
  s/basic(plusloc)*\s+\[/[/gi;                                                \\
  s/sharedbobtype\(\w+\)//i;                                                  \\
  s/sharedtableid\(\w+\)//i;                                                  \\
  s/shared\([\w,\s]+\)//i;                                                    \\
  s/obsoleteafter\(\d+\)//i;                                                  \\
  s/^(table\s+[\d,\s]+)iot /$1/i;                                             \\
  /^table\s+[\d,\s]+(\w+)[\s\d\%]+\[(.+)\]/ and do {                          \\
     $tables{uc $1} = $2;                                                     \\
     $l = length $1;                                                          \\
     $max = ($l > $max) ? $l : $max;                                          \\
  }                                                                           \\
}                                                                             \\
for(sort keys %tables) {                                                      \\
   $sp = $max - length($_);                                                   \\
   print $_.(" " x $sp).": ".$tables{$_}."\n";                                \\
}                                                                             \\
' "'" 
alias shorttables 'trimtables | perl -ne  ' "'" ' /^(\w{1,8})\w*\s*:(.+)$/ and do { $sp = 8 - length($1); print  "TS$1".(" " x $sp)." :$2\n" }  ' "'" 
alias tableinfo trimtables

alias dce  ContentExtraction
alias dox  "/c/Program\ Files\ \(x86\)/doxygen/bin/doxygen"
alias dwiz "/c/Program\ Files/doxygen/bin/doxywizard"
alias aperl "/c/Perl/bin/perl"
alias wperl aperl
alias vmperl "/c/Program\ Files\ \(x86\)/VMware/VMware\ vSphere\ CLI/Perl/bin/perl"
alias govsphere "cd /c/Program\ Files\ \(x86\)/VMware/VMware\ vSphere\ CLI/Perl/"

# Path conversion using cygpath
alias towin  'cygpath -t windows "\!^"'
alias tounix 'cygpath -t unix    "\!^"'

# Wix stuff
#alias candle 	"/e/Program\ Files/Windows\ Installer\ XML\ v3/bin/candle.exe"
#alias lit 	"/e/Program\ Files/Windows\ Installer\ XML\ v3/bin/lit.exe"
alias msitrimi     	"msiexec /i HPTRIM.msi /lv\* out.log"
alias msitrimu     	"msiexec /x HPTRIM.msi /lv\* out.log"
alias admininstall 	"msiexec /a \!:1 TARGETDIR=\!:2 /qn /l \!:1.log"
alias admininstallhelp 	'echo "\nFrom a cygwin prompt;\n\n\t> admininstall ABC.msi <targetpath>\n\n<targetpath> must be a windows path, Eg. E:\\tmp\\extract\nSo, to extract the MSI Setup.msi to C:/temp/mydir;\n\n\t> admininstall Setup.msi C:\\\\temp\\\\mydir\n"'

#######################################################################################################################

# SVN
alias svn            "/c/Program\ Files/TortoiseSVN/bin/svn.exe"

set trimbuild      = $trimdir/build/build
set trimdoc        = $trimdir/doc/doc/DocPub

alias svnstat         "svn status . -q"
alias svnstatus       "svn info $trimdir | perl -ne 'print if /^Path|^URL:|^\n/;' "
alias svnstatusfull   "svn info $trimdir | perl -ne 'print unless /^(Working Copy|Relative|Node Kind|Schedule)/;' "
alias svninfo	      svnstatusfull

alias svnup           "svn update $trimdir; date; svn update $trimdir/doc/doc/DocPub;"
alias svnupr	      "mainlocal; svnup; localmain"
alias svnstatic       "svn update $STATIC_REPO"
alias svnstaticr      "staticlocal; svnstatic; localstatic"
alias svnupstatic     svnstatic
alias svnupperl       "svn update $STATIC_PERL"
alias perlup          svnupperl
alias pyup            "svn update $ELASTIC_HOME/../PythonClient"
alias svnupall        "date; svnup; date; svnstatic; date; svnupperl; pyup; date;"
alias updatehere      "svn update"
alias svnuphere       updatehere
alias svnupbin	      "svn update $PERL_BIN"
alias relocperllocal  "svn relocate $SVN_LAB_FILE $LOCAL_SVN_STATIC $PERL_BIN"
alias relocperlremote "svn relocate $LOCAL_SVN_STATIC $SVN_LAB_FILE $PERL_BIN"
alias svnupbinr	      "svnrelocperl; svnupbin; svnrelocbackperl"
alias svnrevcurrent   'svn log -v -r "\!^":"\!^"'
alias svnlogrev       'svn log $SVN_LAB_URI/REPOS/trunk -v -r "\!^":"\!^"'

alias svnhead         'svn log -l 1 -v'
alias svnlatest       'svn log -l 5 -v'
alias showlatest      svnlatest
alias svnlatestmore   'svn log -l 10 -v'
alias showlatestmore  svnlatestmore
alias svnlatestx      'svn log -l \!^ -v'
alias latest          svnlatest
alias latestx         svnlatestx
alias trimhead        "svn log $trimdir -r HEAD:1 --limit 1 --verbose"
alias trimlatest      "svn log $trimdir -r HEAD:1 --limit 10"
alias trimlatestv     "svn log $trimdir -r HEAD:1 --limit 10 --verbose"

alias svnrepoinfo     'cat $SVN_LAB_PATH/db/revprops/0/0 | egrep -v "^(K|V) " '
alias svnrepoinfostat 'cat $SVN_STATIC_PATH/db/revprops/0/0 | egrep -v "^(K|V) " '
alias repoinfo        svnrepoinfo
alias repoinfostat    svnrepoinfostat
alias svnservers      'echo                              \\
"\nLOCAL SERVERS:                                        \\
\tLAB URL    : $LOCAL_SVN_LAB                            \\
\tSTATIC URL : $LOCAL_SVN_STATIC                         \\
\nREMOTE SERVERS:\n                                      \\
\tLAB URL    : $SVN_LAB_URI                              \\
\tSTATIC URL : $SVN_STATIC_URI                           \\
"'

alias serviceadd    'echo "\nLOCAL LAB server : $LOCAL_SVN_LAB (set the PORT# below accordingly)"; \\
perl -e ' "'"' print "sc delete svnlab\nsc create svnlab binpath= \"\\\"C:\\Program Files\\TortoiseSVN\\bin\\svnserve.exe\\\" --service -r E:\\svn_lab --listen-port PORT\# --compression 0\" displayname= \"Subversion Server LAB\" depend= Tcpip start= auto\n"  '"'" ' ;                                     \\
echo "\nLOCAL STATIC server : $LOCAL_SVN_STATIC (set the PORT# below accordingly)";              \\
perl -e ' "'"' print "sc delete svnstatic\nsc create svnstatic binpath= \"\\\"C:\\Program Files\\TortoiseSVN\\bin\\svnserve.exe\\\" --service -r E:\\svn_static --listen-port PORT\# --compression 0\" displayname= \"Subversion Server STATIC\" depend= Tcpip start= auto\n"  '"'" 
alias svnservices     serviceadd

alias writeSvnBranch 'svnstatus | perl -ne '"'"' /^URL:\s+(.+)\/(REPOS\/.+)/ and do { print "$1/$2\n" }' "' "' > C:/temp/svn_branch_x.txt'
alias showrevs       'writeSvnBranch && echo -n "\!*"      | processSvnLog'
alias processSvnLog  'perl -e  '"'"'                     \\
  $| = 1;                                                \\
  chomp($currdir = `pwd`);                               \\
  $currdir =~ s|^/./[^/]+/||;                            \\
  $in=<>;                                                \\
                                                         \\
  if($in =~ /^(.+)\s+(\d+)\s+(list)$/i){                 \\
     ($a,$b,$c) = ($1,$2,$3);                            \\
  }                                                      \\
  elsif($in =~ /^(.+)\s+(\d+)$/i){                       \\
     ($a,$b,$c) = ($1,$2,"");                            \\
  }                                                      \\
  else {                                                 \\
     ($a,$b,$c) = ($in, 10, "");                         \\
  }                                                      \\
                                                         \\
  if($currdir ne ""){                                    \\
    if($a !~ m|^$currdir/|) {                            \\
        $a = $currdir."/$a";                             \\
    }                                                    \\
  }                                                      \\
  $a =~ s|[/\\]$||;                                      \\
                                                         \\
  open TMP,"C:/temp/svn_branch_x.txt";                   \\
  @u = <TMP>;                                            \\
  close TMP;                                             \\
  close TMP;                                             \\
  $ans = shift @u;                                       \\
  chomp $ans;                                            \\
  print "TARGET => $ans/$a\n\n";                         \\
  $cmd = "svn log \"$ans/$a\" -r HEAD:1 --limit $b";     \\
  @out = `$cmd`;                                         \\
                                                         \\
  if($c eq "list"){                                      \\
    for(@out){                                           \\
      if(/^r(\d+)/){ push @list, $1; next }              \\
    }                                                    \\
    print join ",", @list;                               \\
    print "\n";                                          \\
    exit;                                                \\
  }                                                      \\
                                                         \\
  for(@out){                                             \\
    if(/^r(\d+)/){                                       \\
       s/^r(\d+)/$1/;                                    \\
       print;                                            \\
       next;                                             \\
    }	                                                 \\
    next if /^(\s*|-+)$/;                                \\
    print "\t$_";                                        \\
  }                                                      \\
'"'"
alias showchanges     showrevs

alias statproc        "perl $SVN_STATIC_DB/svn_log_processor.pl"
alias statrev         "statproc --rev"
alias statdiff        statrev \!^ --diff \!:2
alias statrevhead     statrev head
alias statrevchange   statproc --change
alias statchange      statproc --change
alias statrevchrange  statproc --change \!:1 --range \!:2
alias statchanger     statrevchrange
alias statrevchdiff   statproc --change \!^ --diff 
alias statrevchdiffr  statproc --change \!:1 --diff --range \!:2
alias statchangerd    statrevchdiffr
alias statuser        statproc --get user
alias statlogm        statproc --match 
alias statlogmi       statproc --no_case --match 
alias statlogmv       statproc --verbose --match 
alias statlogmvi      statproc --no_case --verbose --match 
alias statmatch       statproc --no_case --limit 30 --match
alias statbuildlabel  "statmatch 'label.*\!^'"
alias statloga        "statproc --no_case --author \!:1 --match \!:2" 
alias statlogar       "statproc --no_case --author \!:1 --match \!:2 --revision \!:3" 
alias statlogalib     "statproc --no_case --author libauer --match \!:1"
alias statlogacs      "statproc --author \!:1 --match \!:2"
alias statlogav       "statproc --verbose --author \!:1 --match \!:2"
alias statlogavi      "statproc --no_case --verbose --author \!:1 --match \!:2"
alias matchauth       "statproc --author \!:1 --match \!:2"
alias matchauthor     "statproc --author \!:1 --match \!:2"
alias statfindfile    "statproc --find_file"
alias statschema      statproc --get schema
alias statupdate      statproc --update
alias statlook	      svnlook pg --revprop -r0 $SVN_STATIC_PATH svn:sync-from-url
alias statrelocaterepo 'echo "\n>svnlook pg --revprop -r0 $SVN_STATIC_PATH svn:sync-from-url > url.txt\n<... edit url.txt ...>   (make sure not to add a newline to the end - use textpad, or vi -b ...)\n>svnadmin setrevprop $SVN_STATIC_PATH -r0 svn:sync-from-url url.txt\n" '
alias svnrelocatestat statrelocaterepo
alias svnrelocstat    statrelocaterepo

#
#  LAB Aliases
#

alias labproc        "perl $SVN_LAB_DB/svn_log_processor.pl"
alias labrev	     labproc --rev
alias lab	     labrev
alias labhead        labrev head
alias labmatch       labproc --no_case --limit 30 --match
alias labm           labproc --match
alias labmi          labproc --no_case --match
alias labmv          labproc --verbose --match
alias labmvi         labproc --no_case --verbose --match
alias laba           "labproc --no_case --author \!:1 --match \!:2"
alias labar          "labproc --no_case --author \!:1 --match \!:2 --revision \!:3"
alias labalib        "labproc --no_case --author libauer --match \!:1"
alias labacs         "labproc --author \!:1 --match \!:2"
alias labav          "labproc --verbose --author \!:1 --match \!:2"
alias labavi         "labproc --no_case --verbose --author \!:1 --match \!:2"
alias labauthor      "labproc --author \!:1 --match \!:2"
alias labfindfile    "labproc --find_file"
alias labauth        labauthor
alias labschema	     labproc --get schema
alias labupdate      labproc --update --repo "$SVN_LAB_URI/REPOS"
alias labhelp        labproc --help
alias lablook	     svnlook pg --revprop -r0 $SVN_LAB_PATH svn:sync-from-url
alias labrelocaterepo 'echo "\n>svnlook pg --revprop -r0 $SVN_LAB_PATH svn:sync-from-url > url.txt\n<... edit url.txt ...>   (make sure not to add a newline to the end - use textpad, or vi -b ...)\n>svnadmin setrevprop $SVN_LAB_PATH -r0 svn:sync-from-url url.txt\n" '
alias svnrelocatelab labrelocaterepo
alias svnreloclab    labrelocaterepo

#  MASTER SVN aliases

alias rev	     labrev
alias revhead        labrev head
alias match 	     labmatch
alias logm           labm
alias logmi          labmi
alias logmv          labmv
alias logmvi         labmvi
alias loga           laba
alias logar          labar
alias logalib        labalib
alias logacs         labacs
alias logav          labav
alias logavi         labavi
alias findfile       labfindfile
alias logf           findfile
alias logprocuser    labproc --get user
alias users          logprocuser
alias schema         labschema
alias logupdate      labupdate
alias svnlogh        labproc --help
alias branches       labproc --get branch

#
# If svnserve is running, the sync command below will work, otherwise the subsequent one should always work
# alias syncsvn	   "svnsync sync svn://localhost/"
#
alias syncsvn	    "svnsync sync $SVN_LAB_FILE"
alias synclab       "svnsync sync $SVN_LAB_FILE $SVN_LAB_URI"
alias synclabwork   "svnsync sync $SVN_LAB_FILE svn://labsvn:1137/TRIM"
alias syncsvnmaster synclab
alias syncstatic   "svnsync sync $SVN_STATIC_FILE $SVN_STATIC_URI"
alias syncstat	    syncstatic
alias remlock	    "svn propdel svn:sync-lock --revprop -r 0 $SVN_LAB_FILE"
alias remlockstat    "svn propdel svn:sync-lock --revprop -r 0 $SVN_STATIC_FILE"
alias syncup        "syncsvn; logupdate"

# Setup the documentation directory
alias makedocotrunk 'mkdir -p $SVNBASE/doc/doc; cd -p $SVNBASE/doc/doc; svn co $SVN_LAB_URI/REPOS/doc/trunk/DocPub' 

#
# -------------------- PATCHING aliases --------------------------
#
set SVNBASE = $REPOS_ROOT':'/$revision
alias infowc    'svn info "\!^" --show-item wc-root --no-newline'
alias inforev   'svn info "\!^" --show-item revision --no-newline'
alias infotrunk	'infowc "$SVNBASE"; echo -n "\t\t => @revision "; inforev "$SVNBASE"'
alias infortm	'infowc "$SVNBASE"_RTM; echo -n "\t => @revision "; inforev "$SVNBASE"_RTM'
alias infohf1	'infowc "$SVNBASE"_HF1; echo -n "\t => @revision "; inforev "$SVNBASE"_HF1'
alias infohf2	'infowc "$SVNBASE"_HF2; echo -n "\t => @revision "; inforev "$SVNBASE"_HF2'
alias infop1	'infowc "$SVNBASE"_P1; echo -n "\t => @revision "; inforev "$SVNBASE"_P1'
alias infop2	'infowc "$SVNBASE"_P2; echo -n "\t => @revision "; inforev "$SVNBASE"_P2'
alias infoall   "infotrunk; echo; infortm; echo; infohf1; echo; infohf2; echo; infop1; echo; infop2; echo"
alias allinfo   infoall

alias patchgen   	"$trimdir/$defArchCSharp/$defBuild/PatchGenerator.exe &"
alias patch      	patchgen
alias msipcs		"$trimdir/$defArchCSharp/$defBuild/MsiProperties.exe"
alias pcodes    	msipcs
alias productcodes 	msipcs
alias findcomp	        "perl $STATIC_PERL/WIX/findComponentRefs.pl -d $SVNBASE"
alias findcomponents	"perl $STATIC_PERL/WIX/findComponentRefs.pl"
alias wixfindcomp	findcomp
alias findcomphelp      'echo                                               \\
"\n                                                                         \\
\t1. >findcomponents -d E:/91 tsj                                           \\
\t2. findcomp is equivalent to;                                             \\
\t       >findcomponents -d <Repo path>                                     \\
\t   for the  current environment                                           \\
\t3. Multiple components to search;                                         \\
\t       >findcomp CSH.htm sdk.dll                                          \\
\t4. Specify components to search on from a file;                           \\
\t       >findcomp -input components.txt                                    \\
\t4. For more detailed help, >findcomp -help                                \\
\n\n"                                                                       \\
'                                                                           \\

# SETUP Documentation directories 
alias makedocopatch 'mkdir -p "$SVNBASE"_"\!^/doc/doc"; cd "$SVNBASE"_"\!^/doc/doc"; svn co $SVN_LAB_URI/REPOS/doc/trunk/DocPub'
alias makedocoall "makedocopatch P1; makedocopatch P2; makedocopatch HF1; makedocopatch HF2; makedocopatch RTM;" 

# 
#  Update a branch to a particular revision
#
alias pushrtm   'svn update --revision "\!^" "$SVNBASE"_RTM' 
alias pushhf1   'svn update --revision "\!^" "$SVNBASE"_HF1' 
alias pushhf2   'svn update --revision "\!^" "$SVNBASE"_HF2' 
alias pushp1    'svn update --revision "\!^" "$SVNBASE"_P1' 
alias pushp2    'svn update --revision "\!^" "$SVNBASE"_P2' 
alias pushall   "pushrtm \!^; pushhf1 \!^; pushhf2 \!^; pushp1 \!^; pushp2 \!^;"

alias robosync  'robocopy "\!:1" "\!:2" /ZB /MIR /COPYALL'
alias robosyncall "robosync F:/83 E:/83; robosync F:/83_RTM E:/83_RTM; robosync F:/83_HF1 E:/83_HF1; robosync F:/83_HF2 E:/83_HF2; robosync F:/83_P1 E:/83_P1; robosync F:/83_P2 E:/83_P2;" 
#
#  Show the current build version for a branch or set
#  or manipulate the build number
#
alias buildver  "perl $STATIC_PERL/WIX/buildVersion.pl --show --compact --root $trimdir" 
alias bver      'perl $STATIC_PERL/WIX/buildVersion.pl --show --compact --root $SVNBASE"\!^"' 
alias bvers     'perl $STATIC_PERL/WIX/buildVersion.pl --show --compact --no_repos --root $SVNBASE"\!^"' 
alias allvers   'bver ""; bver _RTM; bver _HF1; bver _HF2; bver _P1; bver _P2' 
alias versall   allvers

alias incrbuild "perl $STATIC_PERL/WIX/buildVersion.pl $trimdir"
alias ihotfix   "perl $STATIC_PERL/WIX/buildVersion.pl --hotfix $trimdir"
alias decrbuild "perl $STATIC_PERL/WIX/buildVersion.pl --decrement $trimdir"
alias dhotfix   "perl $STATIC_PERL/WIX/buildVersion.pl --hotfix --decrement $trimdir"
alias setbuild  "perl $STATIC_PERL/WIX/buildVersion.pl --build \!^ $trimdir"
alias showbuild "perl $STATIC_PERL/WIX/buildVersion.pl --show $trimdir"
alias buildversion showbuild

alias revert    "perl $STATIC_PERL/WIX/buildVersion.pl --revert $trimdir"
alias revbld    'perl $STATIC_PERL/WIX/buildVersion.pl --revert --root $SVNBASE"\!^"'
alias revertall 'revbld _RTM; revbld _HF1; revbld _HF2; revbld _P1; revbld _P2'
#
alias patchinfo ' infotrunk; echo -n ", Build "; bvers "";   \\
                  infortm;   echo -n ", Build "; bvers _RTM; \\
                  infohf1;   echo -n ", Build "; bvers _HF1; \\
                  infohf2;   echo -n ", Build "; bvers _HF2; \\
                  infop1;    echo -n ", Build "; bvers _P1;  \\
                  infop2;    echo -n ", Build "; bvers _P2  \\
' 

#
# Create Shortcuts to the solution files and Release/MSI directories
#
alias mkscutrel 'mkdir -p "/$REPOS_ROOT/$revision"_"\!^/x64/Release";    mkshortcut -n  "\!^ Release"  "/$REPOS_ROOT/$revision"_"\!^/x64/Release"'
alias mkscutany 'mkdir -p "/$REPOS_ROOT/$revision"_"\!^/AnyCPU/Release"; mkshortcut -n  "\!^ AnyCPU"   "/$REPOS_ROOT/$revision"_"\!^/AnyCPU/Release"'
alias mkscuten  'mkdir -p "/$REPOS_ROOT/$revision"_"\!^/msi/x64/en-us";  mkshortcut -n  "\!^ en-us"    "/$REPOS_ROOT/$revision"_"\!^/msi/x64/en-us"'
alias mkscutwix 'mkshortcut -n  "\!^ WIX.sln"        "/$REPOS_ROOT/$revision"_"\!^/trim/WIX.sln"'
alias mkscutcs  'mkshortcut -n  "\!^ TrimCSharp.sln" "/$REPOS_ROOT/$revision"_"\!^/trim/TrimCSharp.sln"'
alias mkscutcpp 'mkshortcut -n  "\!^ TRIM.sln"       "/$REPOS_ROOT/$revision"_"\!^/trim/sln/TRIM/x64/TRIM.sln"'
alias mkscutset 'mkshortcut -n  "\!^ setup.exe"      "/$REPOS_ROOT/$revision"_"\!^/trim/wix/Setup.exe"'
alias mkscutlbrk 'mkshortcut -n  "\!^ Root_____________________________________" "/$REPOS_ROOT/$revision"_"\!^"'

alias scutsrtm  "mkscutrel RTM; mkscutany RTM; mkscuten RTM; mkscutwix RTM; mkscutcs RTM; mkscutcpp RTM; mkscutset RTM; mkscutlbrk RTM"
alias scutshf1  "mkscutrel HF1; mkscutany HF1; mkscuten HF1; mkscutwix HF1; mkscutcs HF1; mkscutcpp HF1; mkscutset HF1; mkscutlbrk HF1"
alias scutshf2  "mkscutrel HF2; mkscutany HF2; mkscuten HF2; mkscutwix HF2; mkscutcs HF2; mkscutcpp HF2; mkscutset HF2; mkscutlbrk HF2"
alias scutsp1   "mkscutrel P1; mkscutany P1; mkscuten P1; mkscutwix P1; mkscutcs P1; mkscutcpp P1; mkscutset P1; mkscutlbrk P1"
alias scutsp2   "mkscutrel P2; mkscutany P2; mkscuten P2; mkscutwix P2; mkscutcs P2; mkscutcpp P2; mkscutset P2; mkscutlbrk P2"
alias scutsall  "scutsrtm; scutshf1; scutshf2; scutsp1; scutsp2"
alias makeshortcuts scutsall

#
# Create Shortcuts to the solution files and Release/MSI directories based on TYPE
#
alias mkscutrelt 'mkdir -p "/$REPOS_ROOT/$revision"_"\!^/x64/Release";    mkshortcut -n  "Release_\!^"  "/$REPOS_ROOT/$revision"_"\!^/x64/Release"'
alias mkscutanyt 'mkdir -p "/$REPOS_ROOT/$revision"_"\!^/AnyCPU/Release"; mkshortcut -n  "AnyCPU_\!^"   "/$REPOS_ROOT/$revision"_"\!^/AnyCPU/Release"'
alias mkscutent  'mkdir -p "/$REPOS_ROOT/$revision"_"\!^/msi/x64/en-us";  mkshortcut -n  "en-us_\!^"    "/$REPOS_ROOT/$revision"_"\!^/msi/x64/en-us"'
alias mkscutwixt 'mkshortcut -n  "WIX_\!^.sln"        "/$REPOS_ROOT/$revision"_"\!^/trim/WIX.sln"'
alias mkscutcst  'mkshortcut -n  "TrimCSharp_\!^.sln" "/$REPOS_ROOT/$revision"_"\!^/trim/TrimCSharp.sln"'
alias mkscutcppt 'mkshortcut -n  "TRIM_\!^.sln"       "/$REPOS_ROOT/$revision"_"\!^/trim/sln/TRIM/x64/TRIM.sln"'
alias mkscutsett 'mkshortcut -n  "setup.exe_\!^"      "/$REPOS_ROOT/$revision"_"\!^/trim/wix/Setup.exe"'
alias mkscutlbrkt 'mkshortcut -n  "Root_\!^ _____________________________________" "/$REPOS_ROOT/$revision"_"\!^"'

alias scutsrtmt  "mkscutrelt RTM; mkscutanyt RTM; mkscutent RTM; mkscutwixt RTM; mkscutcst RTM; mkscutcppt RTM; mkscutsett RTM; mkscutlbrkt RTM "
alias scutshf1t  "mkscutrelt HF1; mkscutanyt HF1; mkscutent HF1; mkscutwixt HF1; mkscutcst HF1; mkscutcppt HF1; mkscutsett HF1; mkscutlbrkt HF1 "
alias scutshf2t  "mkscutrelt HF2; mkscutanyt HF2; mkscutent HF2; mkscutwixt HF2; mkscutcst HF2; mkscutcppt HF2; mkscutsett HF2; mkscutlbrkt HF2 "
alias scutsp1t   "mkscutrelt P1; mkscutanyt P1; mkscutent P1; mkscutwixt P1; mkscutcst P1; mkscutcppt P1; mkscutsett P1; mkscutlbrkt P1 "
alias scutsp2t   "mkscutrelt P2; mkscutanyt P2; mkscutent P2; mkscutwixt P2; mkscutcst P2; mkscutcppt P2; mkscutsett P2; mkscutlbrkt P2 "
alias scutsallt  "scutsrtmt; scutshf1t; scutshf2t; scutsp1t; scutsp2t "
alias makeshortcutst scutsallt

#
# -----------------------------------------------------------------
#
alias mainlocal  ' echo `svn info $trimdir | pgrep "URL: http"` "AA" $LOCAL_SVN_LAB "BB" $trimdir  \\
 | perl -ne ' "' "'                                                                    \\
      /^URL: (.+)\/REPOS.+ AA (.+) BB (.+)$/ and system("svn","relocate","$1","$2","$3");   \\
 '"'"

alias localmain  ' echo `svn info $trimdir | pgrep "URL: svn"` "AA" $SVN_LAB_FILE "BB" $trimdir  \\
 | perl -ne ' "' "'                                                                      \\
      /^URL: (.+)\/REPOS.+ AA (.+) BB (.+)$/ and system("svn","relocate","$1","$2","$3");     \\
      exit;                                                                                   \\
 '"'"

alias staticlocal ' echo `svn info $STATIC_REPO | pgrep "URL: http"` "AA" $LOCAL_SVN_STATIC "BB" $STATIC_REPO  \\
 | perl -ne ' "' "'                                                                    \\
      /^URL: (.+)\/REPOS.+ AA (.+) BB (.+)$/ and system("svn","relocate","$1","$2","$3");   \\
 '"'"

alias localstatic ' echo `svn info $STATIC_REPO | pgrep "URL: svn"` "AA" $SVN_LAB_FILE "BB" $STATIC_REPO  \\
 | perl -ne ' "' "'                                                                      \\
      /^URL: (.+)\/REPOS.+ AA (.+) BB (.+)$/ and system("svn","relocate","$1","$2","$3");     \\
      exit;                                                                                   \\
 '"'"


alias sloghelp		'echo "\nUse slog and slogr if you are in the directory you wish to view the svn log of;\n\n\tslog 85123         - Will print all log entries from HEAD -> revision 85123\n\tslogr 85123 84444  - Will print the log entries starting at 85123  -> 84444\n\nUse slogurl and slogurlr when you have the repository URL and are not in a checked-out directory;\n\n\tslogurl svn://localhost/REPOS/trunk 84357\n\tslogurlr svn://localhost/REPOS/trunk 84405 84357\n\n" '
alias slog 		'svn log -r HEAD:\!^ | perl -e ' "'" ' @in = <>; while($l = shift @in){chomp $l; if($l =~ /^r(\d+)\s+\|\s+(.+)\s+\|\s+\d+-\d+-\d+\s+(\d+:\d+:\d+)\s+(\+\d+)\s+\((.+)\)\s+|\s+\d+\s+line/){ print "$1\t$2\t$5 $3\t"}  elsif($l =~ /^\-\-\-/){ print "\n"} else { $l =~ s/^\s+|\s+$//g; print " $l"} } '  "'"
alias slogr 		'svn log -r \!:1\:\!:2 | perl -e ' "'" ' @in = <>; while($l = shift @in){chomp $l; if($l =~ /^r(\d+)\s+\|\s+(.+)\s+\|\s+\d+-\d+-\d+\s+(\d+:\d+:\d+)\s+(\+\d+)\s+\((.+)\)\s+|\s+\d+\s+line/){ print "$1\t$2\t$5 $3\t"}  elsif($l =~ /^\-\-\-/){ print "\n"} else { $l =~ s/^\s+|\s+$//g; print " $l"} } '  "'"
alias slogurl 		'svn log \!:1 -r HEAD:\!:2 | perl -e ' "'" ' @in = <>; while($l = shift @in){chomp $l; if($l =~ /^r(\d+)\s+\|\s+(.+)\s+\|\s+\d+-\d+-\d+\s+(\d+:\d+:\d+)\s+(\+\d+)\s+\((.+)\)\s+|\s+\d+\s+line/){ print "$1\t$2\t$5 $3\t"}  elsif($l =~ /^\-\-\-/){ print "\n"} else { $l =~ s/^\s+|\s+$//g; print " $l"} } '  "'"
alias slogurlr 		'svn log \!:1 -r \!:2\:\!:3 | perl -e ' "'" ' @in = <>; while($l = shift @in){chomp $l; if($l =~ /^r(\d+)\s+\|\s+(.+)\s+\|\s+\d+-\d+-\d+\s+(\d+:\d+:\d+)\s+(\+\d+)\s+\((.+)\)\s+|\s+\d+\s+line/){ print "$1\t$2\t$5 $3\t"}  elsif($l =~ /^\-\-\-/){ print "\n"} else { $l =~ s/^\s+|\s+$//g; print " $l"} } '  "'"

#######################################################################################################################

# ALM 
alias alm                 "perl $ALM_DB/ALMTool.pl --proxy $PROXY"
alias almmatch            "alm --match \!^ | pgrep summary"
alias almmatchverbose     alm --match 
alias almmatchv           almmatchverbose 
alias alm_data_convert    "perl $ALM_DB/data_convert.pl --proxy $PROXY"
alias almlibauer          alm --user active_owner:libauer submit cycle reserved team test found target development state:\!\"closed\|duplicate\"
alias almlibactivex       alm --user active_owner:libauer owner assigned \# severity issue_type investigation applies target submit cycle reserved team test found development state:\!\"closed\|duplicate\" 
alias almlog		  'almlibactivex -width 500 |       \\
perl -e ' "'" '                                             \\
my @in = <>;                                                \\
my $minLen = 100;                                           \\
for(@in){                                                   \\
   if(/^(\d+)\s+\w+\s+(?:decision)*\s+(.+)/i) {             \\
      push @cr,$1;                                          \\
      $t = $2;                                              \\
      push @sum, $2;                                        \\
      if($t =~ /(\s{6,})/){                                 \\
          $l = length $1;                                   \\
          $minLen =  $l < $minLen ? $l : $minLen;           \\
      }                                                     \\
   }                                                        \\
}                                                           \\
for(my $i=0; $i <= $#cr; $i++) {                            \\
  my ($cr,$sum) = ($cr[$i],$sum[$i]);                       \\
  $sum =~ s/\s{$minLen}//;                                  \\
  print "CR$cr : $sum\n";                                   \\
}                                                           \\
'  "'" 
alias almshort            alm owner sub cycle release invest -width 105 --user
alias almlib		  'almlibauer | perl -ne ' "'" ' chomp; if(/^(.+\S)\s+(.\[..)$/){ print "$1$2\n" } elsif (/^(.+\S)\s+$/){ print "$1\n" } else { print }  '  "'"
alias almlibw             'almlibauer -width 105 | perl -ne ' "'" ' chomp; if(/^(.+\S)\s+(.\[..)$/){ print "$1$2\n" } elsif (/^(.+\S)\s+$/){ print "$1\n" } else { print }  '  "'"
alias almlibwa            'almlibactive  -width 105 | perl -ne ' "'" ' chomp; if(/^(.+\S)\s+(.\[..)$/){ print "$1$2\n" } elsif (/^(.+\S)\s+$/){ print "$1\n" } else { print }  '  "'"
alias almliball           alm libauer
alias almschema           alm --schema
alias cr                  alm --cr
alias crsum               alm --summary --cr
alias almupdate           alm_data_convert --http_server $ALM_SYNC_URL --update --verbose
alias almupdatehome       "almupdate --proxy home"
alias almsync             almupdate
alias almsynchome         almupdatehome
alias almcheckdates	  alm_data_convert --http_server $ALM_SYNC_URL --sanity_check
alias almfixdefects	  almupdate --use_remote --type defect
alias almsanitycheckhelp  'echo                                               \\
"\n                                                                         \\
\t1. Run almcheckdates                                                             \\
\t2. Copy sanityCheckOutput.txt to : ~/Dropbox/Work                            \\
\t3. Wait a couple of minutes for it to be processed                           \\
\t4. Run almfixdefects to download defectResults.txt and update local files    \\
\n\n"                                                                         \\
'                                                                             \\
alias sanityhelp	  almsanitycheckhelp

#######################################################################################################################

# RSYNC
# Sync the files from source to destination
alias sync    "rsync -avub --size-only --exclude '.svn' --exclude '*~'"
alias syncdry "rsync -avubn --size-only --exclude '.svn' --exclude '*~'"

# Run TRIM programs

set bulkloader = BulkLoader.exe
if ($revision > 81) then
    set bulkloader = TRIMBulkLoader.exe 
endif

alias bulk              "$trimdir/$defArchCSharp/$defBuild/$bulkloader"
alias bulkloader        bulk
alias b                 bulk -db $DBID
alias origins           b -get "'*'"
alias orgget            b -get '\!^'
alias orgrun            b -run '\!^'
alias makerecs          "perl $PERL_BIN/CreateManyRecords.pl"
alias makerecsdefault   makerecs --number \!^  --output out.txt
alias makecontainers    bulk testtrim bulkLoader --type container --timeout 6000 --assert --inplace --containers 1 --perContainer 256
alias formatdat         perl $STATIC_PERL/misc/formatBulkLoaderDatFiles.pl --print  
alias formatblk         formatdat
alias parsedat          formatdat

alias tes        "$trimdir/$defArch/$defBuild/TRIMEnterpriseStudio.exe &"
alias trim       "$trimdir/$defArch/$defBuild/TRIM.exe &"
alias trimhelp   "hh $trimdir/doc/doc/DocPub/TRIM.chm &"
alias msihelp    "hh $WIX_DIR/doc/msi.chm &"
alias wixhelp    "hh $WIX_DIR/doc/WiX.chm &"
alias dtfhelp    "hh $WIX_DIR/doc/DTF.chm &"
alias dtfapihelp "hh $WIX_DIR/doc/DTFAPI.chm &"
alias wgs        "$trimdir/$defArch/$defBuild/TRIMWorkgroup.exe &"
alias wgsnoevent "$trimdir/$defArch/$defBuild/TRIMWorkgroup.exe --noEvent &"
alias trimevent  "$trimdir/$defArch/$defBuild/TRIMEvent --dbid \!^ --wgsId 001 --wgsPort 1137 &"
alias trimeventlocal  "$trimdir/$defArch/$defBuild/TRIMEvent --dbid $DBID --wgsId 001 --wgsPort 1137 &"
alias trimds     "$trimdir/$defArchCSharp/$defBuild/TrimDS.exe &"
alias killtrim   "$trimdir/Automation/SmokeTest/killtrim.exe"
alias nuke       "gosln;./NukeSolutions.bat"
alias gensln     "gosln;./GenerateSolutions.bat"
alias nukeandgen "nuke;gensln"


# Build the correct solution

set svexe = "/c/Program\ Files/Microsoft\ SDKs/Windows/v6.0A/Bin/sn.exe"
alias sn "$svexe"
alias signSDK "cd $trimdir/trim/src/SDKNet; $svexe -R $trimdir\\$defArch\\$defBuild\\HP.HPTRIM.SDK.dll sdknet.snk"

# Run populate database
alias popdb "cd $trimdir; $trimdir/$defArch/$defBuild/PopulateDatabase.exe"
alias restorepopdb "popdb --load"
alias reloadpopdb restorepopdb
alias popdboracle popdb --db oracle64

alias getp    'echo $PATH | perl -ne '"'"'  for( split /:/ ){ print "$_\n" } '"'"
alias getpath "perl $PERL_BIN/getPath.pl"
alias sysinfo "systeminfo | perl -ne  'print unless /^\s+\[\d+\]/'"
alias uptime  "systeminfo | pgrep -i 'boot time'"


# Compile a script to an executable using Strawberry Perl's version of pp
alias perlcompile   "pp --lib=C:/strawberry/perl/vendor/lib  --lib=C:/strawberry/perl/site/lib  --lib=C:/strawberry/perl/lib -o "
alias sperl         "/c/strawberry/perl/bin/perl"
alias perltidy	    "perltidy.bat \!:1 -o C:/tmp/perltidy.out; cp C:/tmp/perltidy.out \!:1"

alias xmlconf       "perl $PERL_BIN/xmlconfig.pl --file "
alias xconf         "perl $PERL_BIN/xmlconfig.pl"
alias xmlnoc        "perl $PERL_BIN/stripXMLcomments.pl"
alias xmlformat     $PERL_BIN/xmlformat.pl
alias xmlf          xmlformat

alias trimconfig    perl $PERL_BIN/xmlconfig.pl --file $trimcfg
alias shconf        trimconfig
alias shconfig      trimconfig
alias showconf      trimconfig
alias restoreconfig "cp /c/TestDatasets/$DBID/backup/TRIMConfig.tcfg $trimcfgdir"
alias goconfig      gocfg
alias xmltrim       "perl xmlformat.pl $trimcfg"
alias getconfig     "more $trimcfg"
alias fixtrimconfig "perl xmlformat.pl -i -b .backup $trimcfg"

alias wixgen        perl $STATIC_PERL/WIX/AutoGenerateWixFromHeat.pl
alias makewix       perl $STATIC_PERL/WIX/makeWixComponents.pl
alias wixcomponents makewix

# Lookup a perl function using perldoc
alias perldoc   "/c/strawberry/perl/bin/perldoc.bat \!:1 | more"
alias perlfunc  "perldoc -f"

alias unicode	    perl $STATIC_PERL/misc/unicodeTools.pl


################################################
### PERL DATABASE ACCESS

alias dbhelp      'echo                                                            \\
"\n                                                                                \\
\t whichenv             : displays current settings                                \\
\t dbsession <value>    : sets the database to run against                         \\
\t dbserver  <value>    : sets the database instance to use                        \\
\t db        <options>  : general db operations                                    \\
\t dbs                  : list available databases for current SERVER ($dbServer)  \\
\t dbdetails            : as above, but with verbose outout                        \\
\t dbsql     <string>   : run the SQL specified by double quoted <string>          \\
\t                                                                                 \\
\t add -verbose to any command to see what is actually being run                   \\
\t                                                                                 \\
\t EXAMPLE                                                                         \\
\t   Set the server to SQL2016  :  >dbserver SQL2016                               \\
\t   Set the database to TEST91 :  >dbsession TEST91                               \\
\t                                                                                 \\
\t   Query the number of rows in the TSRECORD table;                               \\
\t   (The ^ is a double quote)                                                     \\
\t                                                                                 \\
\t   >dbsql ^SELECT COUNT(*) FROM TSRECORD^ --verbose  --unadorned                 \\
                                                                                   \\
SERVER            : SQL2016                                                        \\
DATABASE          : TEST91                                                         \\
CONNECTION STRING : dbi:ODBC:driver={SQL Server};Server=SQL2016;Database=TEST91;Trusted_Connection=Yes \\
SQL QUERY         : SELECT COUNT(*) FROM TSRECORD                                  \\
MAX COLUMN WIDTH  : UNDEFINED                                                      \\
NUMBER OF ROWS    : 1                                                              \\
NUMBER OF COLUMNS : 1                                                              \\
                                                                                   \\
 306                                                                               \\
                                                                                   \\
\tFor more detailed help, db -help                                                 \\
\n\n"                                                                              \\
'                                                                                  \\

# Unadorned perl script to allow connections to other servers
alias dbquery        "perl $STATIC_PERL/db/db.pl --server $dbServer"

# dbpl is defined at the start of the file

alias db          dbpl
alias dbv         "dbpl --version $revision"
alias dbs         "dbquery --database tempdb --list"
alias dbdetails   "dbquery --database tempdb --list --verbose"
alias dataset	  'dbid | perl -ne  '"'"' print "DBID => $_\n"  '"'"

alias bobids      "dbv --id bob"
alias bobidsr     "dbv --id bob -rev"
alias bobs        bobids
alias bobsr       bobidsr
alias dbidall     "dbv --id all"

alias eventids    "dbv --id event"
alias eventidsr   "dbv --id event -rev"
alias events      eventids
alias eventsr     eventidsr

alias table       "dbv -table"
alias tables      "dbv -get_tables"
alias tableids    "dbv --id table"
alias tableidsr   "dbv --id table -rev"
alias tids        tableids
alias tidsr       tableidsr

alias dbsql       db -sql
alias sql         dbsql
alias sqlv        dbv -sql
alias gtable      "dbv -table"
alias getrec      "dbv -num -row"
alias getrecs     getrec
alias dumpdb      dbv --dump_all
alias grepdump    "dbv --dump_all | egrep -i "
alias constraints "dbv -sql 'Select * FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS ORDER BY TABLE_NAME'"
#alias tblconstraints "dbv -sql 'Select * FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS con WHERE con.TABLE_NAME = '\!^' ORDER BY CONSTRAINT_NAME'" 
alias tblconstraints "dbv -sql 'SELECT * FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS ORDER BY CONSTRAINT_NAME' | perl -ne 'if(/Test_80_SqlServer/){ if(/\!^/){ print }} else {print}'"

alias locs	db --object_type LOCATION --unadorned
alias locsv	dbv --object_type LOCATION --unadorned
alias locuri    locsv --object_uri 
alias locname   locsv --object_name 
alias loceaddr  "dbv -sql 'SELECT * FROM TSLOCATION LOC INNER JOIN TSLOCEADDR EADD ON LOC.uri = EADD.leLocUri' -col 1,2,24,26,27,28 -num -verbose"

alias locations  db  -table TSLOCATION -col 1,2
alias locationsv dbv -table TSLOCATION -col 1,2

alias recs	db --object_type RECORD --unadorned --max 60
alias recsv	dbv --object_type RECORD --unadorned --max 60
alias records   recs
alias recordsv  recsv
alias recuri    recsv --object_uri 
alias recname   recsv--object_name 

alias rectypes	  db --object_type RECTYPE --unadorned
alias rectypesv	  dbv --object_type RECTYPE --unadorned
alias rectypeuri  rectypesv --object_uri 
alias rectypename rectypesv --object_name 

#-------------------------------------------------

# FIGHTING THE SHELL EVERY STEP OF THE WAY :)
alias mklocdata   "sqlv 'SELECT * FROM TSLOCATION LOC JOIN TSLOCPERSO PER on LOC.uri = PER.lpLocUri' -col 22,23,28,27 -un -num | perl -ne 'use 5.010; /^\s+(\d+)\s+(.+)/ and do { s/^\s+\d+\s+//; s/\t/;/g; s/\s+;/;/g; chop; chop; say } ' "
alias mkpersondata "sqlv 'SELECT * FROM TSLOCATION LOC INNER JOIN TSLOCEADDR EADD ON LOC.uri = EADD.leLocUri' -col 2,4,24  -un -num | perl -ne 'use 5.010; /^\s+(\d+)\s+(.+)/ and do { s/^\s+\d+\s+//; s/\t/;/g; s/\s+;/;/g; chop; chop; say } ' "

# SQLITE
set SQLITE_DB=$SVN_STATIC_DB/svn.db
set SQLITE_ALM=$ALM_DB/database/ALM.db

alias sqlite            "sqlite3.exe"
alias sqliteq           "sqlite3.exe $SQLITE_DB"
alias almsqlite         "sqlite3.exe $SQLITE_ALM"
alias crmatch           almsqlite \"SELECT id,message FROM messages WHERE message MATCH \'\!^\' AND type = \'0\' ORDER BY CAST\(id AS INTEGER\)\"
alias crmatchdesc       almsqlite \"SELECT id,message FROM messages WHERE message MATCH \'\!^\' AND type = \'1\' ORDER BY CAST\(id AS INTEGER\)\"
alias query		sqliteq
alias sqlitedbopen      cygstart cmd.exe /c sqlite3.exe
alias sqlitedb          cygstart cmd.exe /c sqlite3.exe $SQLITE_DB 
alias almsqlitedb       cygstart cmd.exe /c sqlite3.exe $SQLITE_ALM 
alias sqliteanal        "sqlite3_analyzer.exe"
alias filepath          sqlite3.exe $SQLITE_DB \"SELECT \* FROM files WHERE PATH LIKE \'%\!^%\'\"
alias sqlitefp          sqlite3.exe $SQLITE_DB \"SELECT \* FROM files WHERE PATH LIKE \'%\!^%\'\"
alias sqlitem           sqlite3.exe $SQLITE_DB \"SELECT \* FROM messages WHERE message LIKE \'%\!^%\'\"
alias sqlmatch         'sqlitem \!^ |   perl -ne '"'"'  if(/^(\d+)\|(.+)$/){ print "-------------------------| $1 |--------------------------\n$2\n" }else{print}    '"'"

# Query the SVN sqlite database for the UUID of a given checked out path
alias sqliteuuid        "sqlite .svn/wc.db 'select uuid from REPOSITORY where id=1'"
alias uuidupdate        "sqlite .svn/wc.db 'update REPOSITORY set uuid=\!^ where id=1'"
alias repoinfo          "sqlite .svn/wc.db 'select * from REPOSITORY'"

alias howtospell 'echo "\!^" | aspell -a'
alias spell 'wn "\!^" -g -synsn -synsv -synsa -synsr -antsn -antsv -antsa -antsr -coorn -coorv -derin -deriv -grepn -grepv -grepa -grepr |& grep -v "wn: invalid search option:" '
alias spella 'echo "\!^" >> ~/words.txt; wn "\!^" -g -synsn -synsv -synsa -synsr -antsn -antsv -antsa -antsr -coorn -coorv -derin -deriv -grepn -grepv -grepa -grepr |& grep -v "wn: invalid search option:" '
alias spellb 'echo "\!^" >> ~/words.txt; wn "\!^" -g -over -grepn -grepv -grepa -grepr |& grep -v "wn: invalid search option:"'

alias svndiff svn diff -r PREV

#  You need to supply an argument, so just use an empty string, '', to get the aliases to work without an argument
alias hklm "regtool list \\machine\\\!^"
alias hkcu "regtool list \\user\\\!^"
alias hkcr "regtool list \\root\\\!^"

alias totext      'iconv -f UTF-16 -t UTF-8 '
alias fromunicode 'iconv -f UTF-16 -t UTF-8 '
alias convert2text 'file \!^ |  perl -ne '"'"'              \\
$| = 1;                                                     \\
while(<>){                                                  \\
  chomp;                                                    \\
  if(/^(.+):\s*data\s*$/){                                  \\
    my $old = $1;                                           \\
    next if $old =~ /^converted_/;                          \\
    # Try to escape nasty characters in filename            \\
    #$old =~ s/([^A-z0-9_\.-])/\\\\$1/g;                    \\
    my $new = "converted_".$old;                            \\
    #$new =~ s/[^A-z0-9_\.-]/_/g;                           \\
    if(-e $new){ print "EXISTS - SKIPPING\n"; next; }       \\
    print "Converting $old to ASCII  ... ";                 \\
    system("iconv -f UTF-16 -t UTF-8 \"$old\" > \"$new\""); \\
    print "DONE!\n";                                        \\
  }                                                         \\
}                                                           \\
'"'"

alias grepu       'fromunicode \!:2 | pgrep \!:1'
alias grepui      'fromunicode \!:2 | pgrep -i \!:1'

alias testtrim       "$trimdir/$defArch/$defBuild/testTrim.exe"
alias trimtest       testtrim
alias testhelp	     testtrim --help
alias testcases      testtrim --list
alias bld            testtrim --test bulkLoader --type all --timeout 6000 --assert
alias bldapi         testtrim --test bulkLoader --type api --timeout 6000 --assert
alias bldsth         testtrim --test bulkLoader --type sth --timeout 6000 --assert
alias bldrecs        testtrim --test bulkLoader --type apirec --timeout 6000 --assert
alias bldcont        testtrim --test bulkLoader --type container --timeout 6000 --assert
alias makecontainers testtrim --test bulkLoader --type container --timeout 6000 --assert --inplace --containers \!:1 --perContainer \!:2

# CSharp testing
alias testcs       "$trimdir/$defArchCSharp/$defBuild/TestTrimCs.exe --test"
alias testevmon	   testcs EventMonitor --inplace
	   

alias bulkedocs "date; b -o Origin_Test_Record_ElectronicDocuments -a run; date"
alias timeblk  "date; b -o Origin_Test_Bulk_Loader -a run; date"
alias cleanblk "rm -rf 000000*; rm $DBID.*"

alias psall     'ps -aelW'

# Query windows services to see what is running or stopped
alias service_active        "sc query type= service"
alias service_inactive      "sc query type= service state= inactive"
alias service_all           "sc query type= service state= all"
alias service_drivers       "sc query type= driver"
alias startsql          "sc start MSSQLSERVER"
alias sqlstart          startsql
alias querysql          "sc query MSSQLSERVER"
alias sqlquery          querysql
alias services		"service_all | pgrep DISPLAY | sort"
alias servicesrun	"service_all | pgrep DISPLAY | sort"
alias svcgrep		"service_all | pgrep DISPLAY | pgrep -i \!^ | sort"
alias servicefind       "service_all | pgrep -i -A 5 -B 1 \!^"
alias findservice       servicefind 
alias serviceinfo	"sc qc \!^"

# Run Management Studio
alias mstudio		"/c/Program\ Files\ \(x86\)/Microsoft\ SQL\ Server/110/Tools/Binn/ManagementStudio/Ssms.exe &"
alias sqlms		mstudio

# Run Remote Desktop
alias rdp		"/c/windows/system32/mstsc.exe &"
alias remote		rdp
alias remotedesk	rdp
alias rdesktop		rdp

####################################################################
### GIT commands

alias gogit          "cd ~/aliases"
alias gitpush        "git push origin master"
alias gitnewrepo     "mkdir \!^; cd \!^; git init; touch README; git add README; git commit -m 'first commit'; git remote add origin git@github.com:plibauer/\!^.git; git push origin master"
alias gitcommit      "git commit -a"
alias gitdiff        "git diff | more"
alias gitdiffbc      "git difftool"
alias gitmerge       "git mergetool"
alias gitpull        "git pull"
alias gitstatus      "git status"
alias gitcheckout    "git clone $GIT_URL""plibauer/aliases.git"
alias checkout        gitcheckout
alias commit	      gitcommit
alias status          gitstatus
alias gitsetrepo     "git remote set-url origin git@github.com:plibauer/aliases.git"
alias gitconfig      "git config -l"
alias gitsshtest     "ssh -T git@""$GIT_HOST"
alias gitforceupdate "git fetch --all; git reset --hard origin/master"
alias gitcommitsome  "git add -i"
alias gitremove      "git rm"
alias gitundo        "git reset HEAD"
alias gitrevert      "git checkout -- \!^"
alias gitsetproxy    "setenv HTTP_PROXY $PROXY; setenv HTTPS_PROXY $HTTPS_PROXY"
alias gitunsetproxy  "setenv HTTP_PROXY;setenv HTTPS_PROXY "
alias gitcheckproxy  "setenv | pgrep PROXY"
alias gitconfigproxy "gogit; git config --global http.proxy $PROXY; git config --global https.proxy $HTTPS_PROXY"
alias gitconfignoproxy "gogit; git config --global --unset http.proxy; git config --global --unset https.proxy"
#
alias gitwork	     "gitconfigproxy; git remote set-url origin gitproxy:plibauer/aliases.git"
alias githome	     "gitconfignoproxy; gitsetrepo"

# If a file has been deleted locally, you can restore it using the following and providing the filename as the argument
alias gitrestore  "git checkout HEAD \!^"

# Setup BeyondCompare as the diff/merge tool
set BC3 = "C:/Program Files (x86)/Beyond Compare 3/bcomp.exe"
alias gitconfigdiff  'git config --global diff.tool bc3; git config --global difftool.bc3.path "$BC3" '
alias gitconfigmerge 'git config --global merge.tool bc3; git config --global mergetool.bc3.path "$BC3" '


####################################################################
### MOJOLICIOUS commands

alias cpanm	     cpanm.bat
alias cpanp          cpanp.bat 
alias dbicadmin      dbicadmin.bat
alias hypnotoad      hypnotoad.bat 
alias hypnostop      hypnotoad.bat --stop 
alias morbo          C:/Strawberry/perl/bin/morbo.bat 
alias morbohelp      C:/Strawberry/perl/bin/morbo.bat --help
alias mojo           mojo.bat

#-------------------------------------------------------------------

alias ldapa    "/bin/ldapadd.exe -x -D 'cn=Manager,dc=libauer,dc=com' -W -f \!^"

# WGET an entire HTML site
alias wgetall		"wget -r -l 0 -p " 
alias wgetallhttp	"wget -r -l 0 -p http://\!^" 

# Show internet settings
alias internet		'reg query "HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Internet Settings"'


####################################################################
### PYTHON COMMANDS
# Run a local http server from the current directory;
# Python 2.x
alias httplocal	"cd ~; python -m SimpleHTTPServer"
alias http	httplocal
# Python 3.x
alias http3	"cd ~; python -m http.server"
alias pythonmodules "pip freeze"
alias pymods pythonmodules

#-------------------------------------------------------------------

# Edit a file with emacs and detach
alias emacs	"emacs \!^ &"

####################################################################
### ATOM COMMANDS 
alias atomkeys		cat \"$USERPROFILE\"/Dropbox/Computers/Atom/KeyboardBindings.txt 
alias viatomkeys   	vi \"$USERPROFILE\"/Dropbox/Computers/Atom/KeyboardBindings.txt
alias viatom		viatomkeys


# Change the mount prefix if required
alias mountcygwin	"mount -s --change-cygdrive-prefix /"

# Invoke an admin command prompt
alias command  cygstart cmd.exe

##############################################################################
########################   ELASTICSEARCH (elastic)  ##########################

alias esinstall         "$ELASTIC_HOME/bin/elasticsearch-service.bat install"
alias esstart		"$ELASTIC_HOME/bin/elasticsearch-service.bat start"
alias esdemo            "$ELASTIC_HOME/bin/elasticsearch.bat"
alias esstop		"$ELASTIC_HOME/bin/elasticsearch-service.bat stop"
alias esremove	        "$ELASTIC_HOME/bin/elasticsearch-service.bat remove"
alias esconfig		"cat $ELASTIC_HOME/config/elasticsearch.yml"
alias goes              "cd $ELASTIC_HOME"
alias gopy              "cd $ELASTIC_HOME/../PythonClient"
alias kibana            "$KIBANA_HOME/bin/kibana.bat &"
alias kibanaconfig      "cat $KIBANA_HOME/config/kibana.yml"
alias gokibana          "cd $KIBANA_HOME"
alias esget		'curl -XGET "http://localhost:9200/\!^"'
alias esgetpretty	'curl -XGET "http://localhost:9200/\!^?pretty=true"'
alias esgetexplain	'curl -XGET "http://localhost:9200/\!^?explain=true&pretty=true"'
alias esgetaliases	'curl -XGET "http://localhost:9200/_aliases?pretty=true"'
alias esgetindexes	python "$ELASTIC_HOME/../PythonClient/client.py --config $ELASTIC_HOME/../PythonClient/client.config --info"
alias getindexes        esgetindexes
alias docid             'curl -XGET "http://localhost:9200/$DEF_ELASTIC_INDX/_search?q=_id:\!^&pretty=true"'
alias esgetall          esgetindexes
alias esstats           esgetpretty _stats
alias getsettings       esgetpretty "\!^/_settings"
alias getmappings       esgetpretty "\!^/_mappings"
alias esindexinfo       esgetpretty \!^
alias indexinfo         esgetpretty \!^
alias esput		'curl -XPUT "http://localhost:9200/\!^"'
alias esdelete   	'curl -XDELETE "http://localhost:9200/\!^"'
alias essearchall       esgetpretty _search
alias essearchindex     esget "\!^/_search?pretty=true"
alias searchindex       essearchindex
alias esindexinfo       esget "\!^/_settings,_mapping?pretty=true"


alias eshelp            'echo                                                           \\
"\n                                                                                     \\
1. Show all index aliases [esgetaliases]                                                \\
     >curl -XGET http://localhost:9200/_aliases\?pretty=true                       \n   \\
2. Show all entries for an index called <news> [essearchindex news]                     \\
     >curl -XGET http://localhost:9200/news/_search\?pretty=true                   \n   \\
3. Add detailed explanation to queries (add double quotes around uri)  [esgetexplain]   \\
    >curl -XGET http://localhost:9200/news/_search?explain=true\&pretty=true       \n   \\
4. Delete an index called <news> [esdelete news]                                        \\
    >curl -XDELETE http://localhost:9200/news                                      \n   \\
5. Show the settings for a given index <news> [esindxsettings news]                     \\
    >curl -XGET http://localhost:9200/news/_settings                               \n   \\
"                                                                                       \\
' 

##############################################################################
###########################         IDOL          ############################

alias goidol            "cd $IDOL_DIR"

alias goidols           "cd $IDOL_DIR/TRIM\ IDOL\ Service"
alias idolscfg          "more $IDOL_DIR/TRIM\ IDOL\ Service/TRIM\ IDOL\ Service.cfg"
alias editidolscfg      "vi $IDOL_DIR/TRIM\ IDOL\ Service/TRIM\ IDOL\ Service.cfg"

alias goidolc1          "cd $IDOL_DIR/TRIM\ Content\ Service\ 1"
alias idolc1cfg         "more $IDOL_DIR/TRIM\ Content\ Service\ 1/TRIM\ Content\ Service\ 1.cfg"
alias editidolc1cfg     "vi $IDOL_DIR/TRIM\ Content\ Service\ 1/TRIM\ Content\ Service\ 1.cfg"

alias goidolc2          "cd $IDOL_DIR/TRIM\ Content\ Service\ 2"
alias idolc2cfg         "more $IDOL_DIR/TRIM\ Content\ Service\ 2/TRIM\ Content\ Service\ 2.cfg"
alias editidolc2cfg     "vi $IDOL_DIR/TRIM\ Content\ Service\ 2/TRIM\ Content\ Service\ 2.cfg"

alias icurl             'curl "http://localhost:11000/\!^" --noproxy "*" --silent'
alias idolrecs          'curl "http://localhost:11000/action=query&text=*&databasematch=' "$idolDb" '&MaxResults=999" --noproxy "*" --silent'
alias idolrecsdb        'curl "http://localhost:11000/action=query&text=*&databasematch=' "\!^" '&MaxResults=999" --noproxy "*" --silent'
alias idolstatus        'curl "http://localhost:11000/action=GetStatus" --noproxy "*" --silent | xmlformat.pl'
alias idolquery         'curl "http://localhost:11000/action=query&text=' "\!^" '&databasematch=' "$idolDb" '" --noproxy "*" --silent | xmlformat.pl'
alias idolq             idolquery 
alias irecs             "idolrecs | xmlformat.pl"
alias irecsdb           "idolrecs \!^ | xmlformat.pl"
alias removedb          'curl "http://localhost:11001/DREREMOVEDBASE?DREdbname=\!^"'
alias removedocs        'curl "http://localhost:11001/DREDELDBASE?DREdbname=\!^"'
alias idologa1          "tail -f $IDOL_DIR/TRIM\ Content\ Service\ 1/logs/application.log"
alias idologa2          "tail -f $IDOL_DIR/TRIM\ Content\ Service\ 2/logs/application.log"
alias idologi1          "tail -f $IDOL_DIR/TRIM\ Content\ Service\ 1/logs/index.log"
alias idologi2          "tail -f $IDOL_DIR/TRIM\ Content\ Service\ 2/logs/index.log"
alias idologq1          "tail -f $IDOL_DIR/TRIM\ Content\ Service\ 1/logs/query.log"
alias idologq2          "tail -f $IDOL_DIR/TRIM\ Content\ Service\ 2/logs/query.log"

# Print a mix of 256 ANSI terminal colours
alias colours ' perl -e ' "' "'                                                                  \\
$|=1;                                                                                                 \\
use Term::ANSIColor qw(:constants256 :constants);                                                     \\
use integer;                                                                                          \\
$r = $g = $b = 0;                                                                                     \\
for $x ( 0 .. 215 ){                                                                                  \\
    if($x == 0){                                                                                      \\
         print RGB000 "RGB000"                                                                        \\
    }                                                                                                 \\
    else {                                                                                            \\
       $b = $x % 6;                                                                                   \\
       if($b == 0){                                                                                   \\
           $g++;                                                                                      \\
           if($g % 6  == 0){                                                                          \\
               $g=0;                                                                                  \\
             $r++;                                                                                    \\
          }                                                                                           \\
       }                                                                                              \\
       if($x % 6 == 0){ print "\n" }                                                                  \\
       if($x % 36 == 0){ print"\n" }                                                                  \\
       $col = "RGB$r$g$b";         # Constants in perl are actually inline functions                  \\
       print &$col(), "$col","_";  # SYMBOLIC dereference of a constant eg. RGB345                    \\
   }                                                                                                  \\
}                                                                                                     \\
print "\n";                                                                                           \\
'"'"

##############################################################################
######################         BUILD ALIASES          ########################

if ($defCompiler == "VS2015") then
  set VSVER = 14.0
  set msbuildexe = "C:/Program Files (x86)/MSBuild/14.0/Bin/MSBuild.exe"
else if ($defCompiler == "VS2013") then
  set VSVER = 12.0
  set msbuildexe = "C:/Program Files (x86)/MSBuild/12.0/Bin/MSBuild.exe"
else if ($defCompiler == "VS2008") then
  set VSVER = 9.0
  set msbuildexe = "C:/Windows/Microsoft.NET/Framework64/v4.0.30319/MSBuild.exe"
endif
set devenvexe = "${DEVENV_ROOT}/Microsoft Visual Studio $VSVER/Common7/IDE/devenv.exe"

alias shortcuttrim 'echo "Creating shortcut to $defArch TRIM.sln" && mkshortcut -n "$revision""_$defArch""_TRIM.sln" "/$REPOS_ROOT/$revision/trim/sln/TRIM/$defArch/TRIM.sln"'
alias shortcutcs   'echo "Creating shortcut to TRIMCSharp.sln"    && mkshortcut -n "$revision""_TrimCSharp.sln"      "/$REPOS_ROOT/$revision/trim/TrimCSharp.sln"'
alias shortcutwix  'echo "Creating shortcut to WIX.sln"           && mkshortcut -n "$revision""_WIX.sln"             "/$REPOS_ROOT/$revision/trim/WIX.sln"'
alias shortcutmsi  'echo "Creating shortcut to $defArch MSIs"     && mkshortcut -n "$revision""_$defArch""_MSIs"     "/$REPOS_ROOT/$revision/msi/$defArch/en-us"'
alias makeshortcutscurrent "shortcuttrim;shortcutcs;shortcutwix;shortcutmsi"

alias dumpbin  "/c/Program\ Files\ \(x86\)/Microsoft\ Visual\ Studio\ $VSVER/VC/bin/dumpbin.exe"
alias touchcopy  "touch $trimdir/trim/src/CopyFiles/CopyFiles.cpp"
set buildLog       = "${REPOS_ROOT}:/TEMP/TRIM-$revision$defPatch-$defArch-$defBuild.log"
set buildLogCSharp = "${REPOS_ROOT}:/TEMP/TRIMCSharp-$revision$defPatch-$defArch-$defBuild.log"
set buildLogWix    = "${REPOS_ROOT}:/TEMP/WIX-$revision$defPatch-$defArch-$defBuild.log"
set logSeparator   = "\n----------------------------------------------------------------------------------------------------"

alias ramdisk         "$trimdir/trim/scripts/createRamDisk.cmd"
alias ramdiskrelease  "$trimdir/trim/scripts/createRamDisk.release.cmd"
alias ramdiskr        ramdiskrelease

alias bldlog     	"tail -f $buildLog.build"
alias bldlogcs   	"tail -f $buildLogCSharp.build"
alias bldlogwix  	"tail -f $buildLogWix"
alias bldall 		"date; bldsln; bldcsharp; bldwix; date"
alias clnall 		"clnsln; clncsharp; clnwix"
alias clnallboth	"release; clnall; debug; clnall"

alias buildtest1  '  echo $logSeparator; date;                                                                             \\
   echo "TEST build alias";                                                                                                \\
   echo "$devenvexe,TD=$trimdir,DA=$defArch,DB=$defBuild,BL=$buildLog.build"                                               \\
'

alias buildtest2  'buildtest1 \\
 | perl -ne '  "'  "' s/^(.):./\/$1\//;  s/\s/\\ /g; s/\(/\\(/g; s/\)/\\)/g; print "$_\n"  ' "' "'                         \\
 | perl -e ' "' "'                                                                                                         \\
      @l = <>;                                                                                                             \\
      $line = shift @l;                                                                                                    \\
                                                                                                                           \\
      chomp $line; $line =~ s/\\\s$//; print "INPUT: $line\n";                                                             \\
                                                                                                                           \\
      if($line =~ /.exe,TD=(.+),DA=(.+),DB=(.+),BL=(.+)/) {                                                                \\
        chomp $line;                                                                                                       \\
        $td=$1;$da=$2;$db=$3;$bl=$4;                                                                                       \\
        $line =~ s/.exe(,.+)/.exe/;                                                                                        \\
        $ver=$td; $ver =~ s/^.:.//;                                                                                        \\
      }                                                                                                                    \\
      print "touch $bl\n$line $td/trim/sln/TRIM/$da/TRIM.sln /build $db /project ALL_BUILD /out $bl &\n"                   \\
 '"'"

#  TURN OFF OFFICE ADDIN LOADING AFTER A CSHARP BUILD
alias noaddins ' perl -e ' "' "'                                                                                     \\
   %addins = (Excel        => "HP.HPRM.OfficeIntegration.Excel",                                                     \\
              "MS Project" => "HP.HPRM.OfficeIntegration.Project",                                                   \\
              Outlook      => "HP.HPRM.OfficeIntegration.Outlook",                                                   \\
              PowerPoint   => "HP.HPRM.OfficeIntegration.PowerPoint",                                                \\
              Word         => "HP.HPRM.OfficeIntegration.Word");                                                     \\
  for (sort keys %addins) {                                                                                          \\
     my $key = "HKCU\\Software\\Microsoft\\Office\\".$_."\\Addins\\".$addins{$_};                                    \\
     print "Updated load behaviour for Addin $_ : ".`REG ADD "$key" /v LoadBehavior /t REG_DWORD /d 0 /f`;           \\
  }                                                                                                                  \\
 '"'"
alias addins   ' perl -e ' "' "'                                                                                     \\
   %addins = (Excel        => "HP.HPRM.OfficeIntegration.Excel",                                                     \\
              "MS Project" => "HP.HPRM.OfficeIntegration.Project",                                                   \\
              Outlook      => "HP.HPRM.OfficeIntegration.Outlook",                                                   \\
              PowerPoint   => "HP.HPRM.OfficeIntegration.PowerPoint",                                                \\
              Word         => "HP.HPRM.OfficeIntegration.Word");                                                     \\
  for (sort keys %addins) {                                                                                          \\
     my $key = "HKCU\\Software\\Microsoft\\Office\\".$_."\\Addins\\".$addins{$_};                                    \\
     print `REG QUERY "$key" /v LoadBehavior`;                                                                       \\
  }                                                                                                                  \\
 '"'"

alias buildsolution '  echo $logSeparator; date;                                                                           \\
   echo -n "$devenvexe,TD=$trimdir,DA=$defArch,DB=$defBuild,BL=$buildLog.build"                                            \\
 | perl -ne '  "'  "' s/^(.):./\/$1\//;  s/\s/\\ /g; s/\(/\\(/g; s/\)/\\)/g; print "$_\n"  ' "' "'                         \\
 | perl -e ' "' "'                                                                                                         \\
      @l = <>;                                                                                                             \\
      $line = shift @l;                                                                                                    \\
      chomp $line;                                                                                                         \\
      $line =~ s/\\\s+$//;                                                                                                 \\
      if($line =~ /.exe,TD=(.+),DA=(.+),DB=(.+),BL=(.+)/) {                                                                \\
        $td=$1;$da=$2;$db=$3;$bl=$4;                                                                                       \\
        $line =~ s/.exe(,.+)/.exe/;                                                                                        \\
        $ver=$td; $ver =~ s/^.:.//;                                                                                        \\
        open T,">$bl.cmd_line";                                                                                            \\
        print T "$line $td/trim/sln/TRIM/$da/TRIM.sln /build $db /project ALL_BUILD /out $bl\n";                           \\
        close T;                                                                                                           \\
      }                                                                                                                    \\
      else {                                                                                                               \\
        print "echo \"Invalid input : $line?\"";                                                                           \\
        exit;                                                                                                              \\
      }                                                                                                                    \\
      print "touch $bl\n$line $td/trim/sln/TRIM/$da/TRIM.sln /build $db /project ALL_BUILD /out $bl &\n"                   \\
 ' "' "'                                                                                                                   \\
 | dos2unix | /bin/sh                                                                                                      \\
 | perl -le "print q{$buildLog.build :: $trimdir}"                                                                         \\
 | perl -e ' "' "'                                                                                                         \\
      $| = 1;                                                                                                              \\
      use File::Tail;                                                                                                      \\
      @in = <>; $i = shift @in; chomp $i;                                                                                  \\
      if($i =~ /^(.+) :: (.+)$/){ $b=$1; $ver=$2 }                                                                         \\
      $ver =~ s/^.:.//;                                                                                                    \\
      # print the command line to console                                                                                  \\
      open C, "$b.cmd_line"; @cl = <C>; close C;                                                                           \\
      print "COMMAND LINE: @cl";                                                                                           \\
      print "LOG FILE    : $b\n";                                                                                          \\
      $file = File::Tail->new(name=>$b, interval=>1);                                                                      \\
      while(defined($log=$file->read)) {                                                                                   \\
        chomp $log;                                                                                                        \\
        if($log =~ /Build:\s(\d+)\ssucceeded,\s(\d+)\sfailed,\s(\d+)\sup-to-date,\s(\d+)\sskipped/){                       \\
          $total = $1 + $2 + $3 + $4;                                                                                      \\
          if($total > 30){ print "$log\n"; exit; }                                                                         \\
          else { print "$log\n" }                                                                                          \\
        }                                                                                                                  \\
        elsif($log =~ /----- Build started|\serror\s|\sfatal\s|\sfailed\s/i) {                                             \\
          if(length($log) > 200){ $log = substr($log,0,200); }                                                             \\
          print "$log\n"                                                                                                   \\
        }                                                                                                                  \\
      }                                                                                                                    \\
 '"'"
alias bldsln "buildsolution; date"

alias clnsln '    echo $logSeparator; date;                                                                                \\
    echo -n "$devenvexe,TD=$trimdir,DA=$defArch,DB=$defBuild,BL=$buildLog.clean"                                           \\
 | perl -ne '  "'  "' s/^(.):./\/$1\//;  s/\s/\\ /g; s/\(/\\(/g; s/\)/\\)/g; print "$_\n"  ' "' "'                         \\
 | perl -e ' "' "'                                                                                                         \\
    @l = <>;                                                                                                               \\
    $line = shift @l;                                                                                                      \\
    if($line =~ /.exe,TD=(.+),DA=(.+),DB=(.+),BL=(.+)/){                                                                   \\
      chomp $line;                                                                                                         \\
      $td=$1;$da=$2;$db=$3;$bl=$4;                                                                                         \\
      $line =~ s/.exe(,.+)/.exe/;                                                                                          \\
      $ver=$td; $ver =~ s/^.:.//;                                                                                          \\
    }                                                                                                                      \\
    print "touch $bl\n$line $td/trim/sln/TRIM/$da/TRIM.sln /clean $db /project ALL_BUILD /out $bl &\n"                     \\
 ' "' "'                                                                                                                   \\
 | dos2unix | /bin/sh                                                                                                      \\
 | perl -le "print q{$buildLog.clean :: $trimdir}"                                                                         \\
 | perl -e ' "' "'                                                                                                         \\
    $| = 1;                                                                                                                \\
    use File::Tail;                                                                                                        \\
    @in = <>;                                                                                                              \\
    $i = shift @in;                                                                                                        \\
    chomp $i;                                                                                                              \\
    if($i =~ /^(.+) :: (.+)$/){ $b=$1; $ver=$2 }                                                                           \\
    $ver =~ s/^.:.//;                                                                                                      \\
    print "LOG FILE: $b\n";                                                                                                \\
    $file = File::Tail->new(name=>$b, interval=>1);                                                                        \\
    while(defined($log=$file->read)) {                                                                                     \\
      chomp $log;                                                                                                          \\
      if($log    =~ /Clean:\s\d+\ssucceeded,\s\d+\sfailed/){ print "$log\n"; exit; }                                       \\
      elsif($log =~ /Clean started|Deleting|error|fatal|failed/i) {                                                        \\
        if(length($log) > 200){ $log = substr($log,0,200); }                                                               \\
        print "$log\n"                                                                                                     \\
      }                                                                                                                    \\
    }                                                                                                                      \\
 '" '"

alias buildcsharp 'echo $logSeparator; date;                                                                                 \\
    echo -n "$devenvexe,TD=$trimdir,DA=$defArch,DB=$defBuild,BL=$buildLogCSharp.build"                                     \\
 | perl -ne '  "'  "' s/^(.):./\/$1\//;  s/\s/\\ /g; s/\(/\\(/g; s/\)/\\)/g; print "$_\n"  ' "' "'                         \\
 | perl -e ' "' "'                                                                                                         \\
     @l = <>;                                                                                                              \\
    $line = shift @l;                                                                                                      \\
    if($line =~ /.exe,TD=(.+),DA=(.+),DB=(.+),BL=(.+)/){                                                                   \\
      chomp $line;                                                                                                         \\
      $td=$1;$da=$2;$db=$3;$bl=$4;                                                                                         \\
      $line =~ s/.exe(,.+)/.exe/;                                                                                          \\
      $ver=$td; $ver =~ s/^.:.//;                                                                                          \\
    }                                                                                                                      \\
    print "touch $bl\n$line $td/trim/TRIMCSharp.sln /build $db /out $bl &\n" ' "' "'                                       \\
 | dos2unix | /bin/sh                                                                                                      \\
 | perl -le "print q{$buildLogCSharp.build :: $trimdir}"                                                                   \\
 | perl -e ' "' "'                                                                                                         \\
    $| = 1;                                                                                                                \\
    use File::Tail;                                                                                                        \\
    @in = <>;                                                                                                              \\
    $i = shift @in;                                                                                                        \\
    chomp $i;                                                                                                              \\
    if($i =~ /^(.+) :: (.+)$/){ $b=$1; $ver=$2 }                                                                           \\
    $ver =~ s/^.:.//;                                                                                                      \\
    print "LOG FILE: $b\n";                                                                                                \\
    $file = File::Tail->new(name=>$b, interval=>1);                                                                        \\
    while(defined($log=$file->read)) {                                                                                     \\
        chomp $log;                                                                                                        \\
        if($log =~ /Build:\s(\d+)\ssucceeded,\s(\d+)\sfailed,\s(\d+)\sup-to-date/){                                        \\
          $total = $1 + $2 + $3;                                                                                           \\
          if($total > 40){ print "$log\n"; exit; }                                                                         \\
          else { print "$log\n" }                                                                                          \\
        }                                                                                                                  \\
        elsif($log =~ /----- Build started|\serror\s|\sfatal\s|\sfailed\s/i) {                                             \\
          if(length($log) > 200){ $log = substr($log,0,200); }                                                             \\
          print "$log\n"                                                                                                   \\
        }                                                                                                                  \\
    }                                                                                                                      \\
 '"'"
alias bldcsharp 'buildcsharp; noaddins'

alias clncsharp 'echo $logSeparator;                                                                                       \\
    echo -n "$devenvexe,TD=$trimdir,DA=$defArch,DB=$defBuild,BL=$buildLogCSharp.clean"                                     \\
 | perl -ne '  "'  "' s/^(.):./\/$1\//;  s/\s/\\ /g; s/\(/\\(/g; s/\)/\\)/g; print "$_\n"  ' "' "'                         \\
 | perl -e ' "' "'                                                                                                         \\
    @l = <>;                                                                                                               \\
    $line = shift @l;                                                                                                      \\
    if($line =~ /.exe,TD=(.+),DA=(.+),DB=(.+),BL=(.+)/){                                                                   \\
      chomp $line;                                                                                                         \\
      $td=$1;$da=$2;$db=$3;$bl=$4;                                                                                         \\
      $line =~ s/.exe(,.+)/.exe/;                                                                                          \\
      $ver=$td;                                                                                                            \\
      $ver =~ s/^.:.//;                                                                                                    \\
    }                                                                                                                      \\
    print "touch $bl\n$line $td/trim/TRIMCSharp.sln /clean $db /out $bl &\n" ' "' "'                                       \\
 | dos2unix | /bin/sh                                                                                                      \\
 | perl -le "print q{$buildLogCSharp.clean :: $trimdir}"                                                                   \\
 | perl -e ' "' "'                                                                                                         \\
    $| = 1;                                                                                                                \\
    use File::Tail;                                                                                                        \\
    @in = <>;                                                                                                              \\
    $i = shift @in;                                                                                                        \\
    chomp $i;                                                                                                              \\
    if($i =~ /^(.+) :: (.+)$/){ $b=$1; $ver=$2 }                                                                           \\
    $ver =~ s/^.:.//;                                                                                                      \\
    print "LOG FILE: $b\n";                                                                                                \\
    $file = File::Tail->new(name=>$b, interval=>0);                                                                        \\
    while(defined($log=$file->read)) {                                                                                     \\
      chomp $log;                                                                                                          \\
      if($log    =~ /Clean:\s\d+\ssucceeded,\s\d+\sfailed/){ print "$log\n"; exit; }                                       \\
      elsif($log =~ /Clean started|Deleting|error|fatal|failed/i) {                                                        \\
        if(length($log) > 200){ $log = substr($log,0,200); }                                                               \\
        print "$log\n"                                                                                                     \\
      }                                                                                                                    \\
    }                                                                                                                      \\
 '"'"

alias bldwix 'echo $logSeparator; date;                                                                                    \\
    echo -n "$devenvexe,TD=$trimdir,DA=$defArch,DB=$defBuild,BL=$buildLogWix.build"                                        \\
 | perl -ne '  "'  "' s/^(.):./\/$1\//;  s/\s/\\ /g; s/\(/\\(/g; s/\)/\\)/g; print "$_\n"  ' "' "'                         \\
 | perl -e ' "' "'                                                                                                         \\
    @l = <>;                                                                                                               \\
    $line = shift @l;                                                                                                      \\
    if($line =~ /.exe,TD=(.+),DA=(.+),DB=(.+),BL=(.+)/){                                                                   \\
      chomp $line;                                                                                                         \\
      $td=$1;$da=$2;$db=$3;$bl=$4;                                                                                         \\
      $line =~ s/.exe(,.+)/.exe/;                                                                                          \\
      $ver=$td; $ver =~ s/^.:.//;                                                                                          \\
    }                                                                                                                      \\
    print "touch $bl\n$line $td/trim/WIX.sln /build \"$db|$da\" /out $bl &\n" ' "' "'                                      \\
 | dos2unix | /bin/sh                                                                                                      \\
 | perl -le "print q{$buildLogWix.build :: $trimdir}"                                                                      \\
 | perl -e ' "' "'                                                                                                         \\
    $| = 1;                                                                                                                \\
    use File::Tail;                                                                                                        \\
    @in = <>;                                                                                                              \\
    $i = shift @in;                                                                                                        \\
    chomp $i;                                                                                                              \\
    if($i =~ /^(.+) :: (.+)$/){ $b=$1; $ver=$2 }                                                                           \\
    $ver =~ s/^.:.//;                                                                                                      \\
    print "LOG FILE: $b\n";                                                                                                \\
    $file = File::Tail->new(name=>$b, interval=>1);                                                                        \\
    while(defined($log=$file->read)) {                                                                                     \\
      chomp $log;                                                                                                          \\
        if($log =~ /Build:\s(\d+)\ssucceeded,\s(\d+)\sfailed,\s(\d+)\sup-to-date/){                                        \\
          $total = $1 + $2 + $3;                                                                                           \\
          if($total > 20){ print "$log\n"; exit; }                                                                         \\
          else { print "$log\n" }                                                                                          \\
        }                                                                                                                  \\
        elsif($log =~ /----- Build started|\serror\s|\sfatal\s|\sfailed\s/i) {                                             \\
          if(length($log) > 200){ $log = substr($log,0,200); }                                                             \\
          print "$log\n"                                                                                                   \\
        }                                                                                                                  \\
    }                                                                                                                      \\
 '"'"

alias bldsetup 'echo $logSeparator; date;                                                                                  \\
    echo -n "$devenvexe,TD=$trimdir,DA=$defArch,DB=$defBuild,BL=$buildLogWix.setup"                                        \\
 | perl -ne '  "'  "' s/^(.):./\/$1\//;  s/\s/\\ /g; s/\(/\\(/g; s/\)/\\)/g; print "$_\n"  ' "' "'                         \\
 | perl -e ' "' "'                                                                                                         \\
    @l = <>;                                                                                                               \\
    $line = shift @l;                                                                                                      \\
    if($line =~ /.exe,TD=(.+),DA=(.+),DB=(.+),BL=(.+)/){                                                                   \\
      chomp $line;                                                                                                         \\
      $td=$1;$da=$2;$db=$3;$bl=$4;                                                                                         \\
      $line =~ s/.exe(,.+)/.exe/;                                                                                          \\
      $ver=$td; $ver =~ s/^.:.//;                                                                                          \\
                                                                                                                           \\
      open T, ">$bl.cmd_line";                                                                                             \\
      print T "$line $td/trim/WIX.sln /build \"$db|$da\" /project SetupExecutable /out $bl";                               \\
      close T;                                                                                                             \\
                                                                                                                           \\
    }                                                                                                                      \\
    print "touch $bl\n$line $td/trim/WIX.sln /build \"$db|$da\" /project SetupExecutable /out $bl &\n" ' "' "'             \\
 | dos2unix | /bin/sh                                                                                                      \\
 | perl -le "print q{$buildLogWix.setup :: $trimdir}"                                                                      \\
 | perl -e ' "' "'                                                                                                         \\
    $| = 1;                                                                                                                \\
    use File::Tail;                                                                                                        \\
    @in = <>;                                                                                                              \\
    $i = shift @in;                                                                                                        \\
    chomp $i;                                                                                                              \\
    if($i =~ /^(.+) :: (.+)$/){ $b=$1; $ver=$2 }                                                                           \\
    $ver =~ s/^.:.//;                                                                                                      \\
                                                                                                                           \\
    # print the command line to console                                                                                    \\
    open C, "$b.cmd_line"; @cl = <C>; close C;                                                                             \\
    print "COMMAND LINE: @cl";                                                                                             \\
                                                                                                                           \\
    print "LOG FILE: $b\n";                                                                                                \\
    $file = File::Tail->new(name=>$b, interval=>1);                                                                        \\
    while(defined($log=$file->read)) {                                                                                     \\
        chomp $log;                                                                                                        \\
        if($log =~ /Build:\s(\d+)\ssucceeded,\s(\d+)\sfailed,\s(\d+)\sup-to-date/){                                        \\
          $total = $1 + $2 + $3;                                                                                           \\
          if($total > 8){ print "$log\n"; exit; }                                                                          \\
          else { print "$log\n" }                                                                                          \\
        }                                                                                                                  \\
        elsif($log =~ /----- Build started|\serror\s|\sfatal\s|\sfailed\s/i) {                                             \\
          if(length($log) > 200){ $log = substr($log,0,200); }                                                             \\
          print "$log\n"                                                                                                   \\
        }                                                                                                                  \\
    }                                                                                                                      \\
 '"'"

alias clnwix 'echo $logSeparator;                                                                                          \\
    echo -n "$devenvexe,TD=$trimdir,DA=$defArch,DB=$defBuild,BL=$buildLogWix.clean"                                        \\
 | perl -ne '  "'  "' s/^(.):./\/$1\//;  s/\s/\\ /g; s/\(/\\(/g; s/\)/\\)/g; print "$_\n"  ' "' "'                         \\
 | perl -e ' "' "'                                                                                                         \\
    @l = <>;                                                                                                               \\
    $line = shift @l;                                                                                                      \\
    if($line =~ /.exe,TD=(.+),DA=(.+),DB=(.+),BL=(.+)/){                                                                   \\
      chomp $line;                                                                                                         \\
      $td=$1;$da=$2;$db=$3;$bl=$4;                                                                                         \\
      $line =~ s/.exe(,.+)/.exe/;                                                                                          \\
      $ver=$td;                                                                                                            \\
      $ver =~ s/^.:.//;                                                                                                    \\
    }                                                                                                                      \\
    print "touch $bl\n$line $td/trim/WIX.sln /clean \"$db|$da\" /out $bl &\n" ' "' "'                                      \\
 | dos2unix | /bin/sh                                                                                                      \\
 | perl -le "print q{$buildLogWix.clean :: $trimdir}"                                                                      \\
 | perl -e ' "' "'                                                                                                         \\
    $| = 1;                                                                                                                \\
    use File::Tail;                                                                                                        \\
    @in = <>;                                                                                                              \\
    $i = shift @in;                                                                                                        \\
    chomp $i;                                                                                                              \\
    if($i =~ /^(.+) :: (.+)$/){ $b=$1; $ver=$2 }                                                                           \\
    $ver =~ s/^.:.//;                                                                                                      \\
    print "LOG FILE: $b\n";                                                                                                \\
    $file = File::Tail->new(name=>$b, interval=>1);                                                                        \\
    while(defined($log=$file->read)) {                                                                                     \\
      chomp $log;                                                                                                          \\
      if($log    =~ /Clean:\s\d+\ssucceeded,\s\d+\sfailed/){ print "$log\n"; exit; }                                       \\
      elsif($log =~ /Clean started|Deleting|error|fatal|failed/i) {                                                        \\
        if(length($log) > 200){ $log = substr($log,0,200); }                                                               \\
        print "$log\n"                                                                                                     \\
      }                                                                                                                    \\
    }                                                                                                                      \\
 '"'"

alias bldproj ' echo \!:1                                                                                                  \\
    > /c/tmp/__x;                                                                                                          \\
    echo "$devenvexe,TD=$trimdir,DA=$defArch,DB=$defBuild,BL=$buildLog"                                                    \\
    >> /c/tmp/__x;                                                                                                         \\
   perl -e  '"'"'                                                                                                          \\
    open F,"/c/tmp/__x"  ;                                                                                                 \\
    @in=<F>;close F;                                                                                                       \\
    $proj = shift @in;                                                                                                     \\
    chomp $proj;                                                                                                           \\
    $_ = shift @in;                                                                                                        \\
    s/^(.):./\/$1\//;                                                                                                      \\
    s/\s/\\ /g;                                                                                                            \\
    s/\(/\\(/g; s/\)/\\)/g;                                                                                                \\
    $line = $_;                                                                                                            \\
    if($line =~ /.exe,TD=(.+),DA=(.+),DB=(.+),BL=(.+)/){                                                                   \\
      chomp $line;                                                                                                         \\
      $td=$1;$da=$2;$db=$3;$bl=$4;                                                                                         \\
      $line =~ s/.exe(,.+)/.exe/;                                                                                          \\
      $ver=$td;                                                                                                            \\
      $ver =~ s/^.:.//;                                                                                                    \\
    }                                                                                                                      \\
    print "touch $bl\n$line $td/trim/sln/TRIM/$da/TRIM.sln /build $db /project $proj /out $bl &\n"  '"'"'                  \\
 | dos2unix | /bin/sh                                                                                                      \\
 | perl -le "print q{$buildLog :: $trimdir}"                                                                               \\
 | perl -e '"'"'                                                                                                           \\
    $| = 1;                                                                                                                \\
    use File::Tail;                                                                                                        \\
    @in = <>;                                                                                                              \\
    $i = shift @in;                                                                                                        \\
    chomp $i;                                                                                                              \\
    if($i =~ /^(.+) :: (.+)$/){ $b=$1; $ver=$2 }                                                                           \\
    $ver =~ s/^.:.//;                                                                                                      \\
    print "LOG FILE: $b\n";                                                                                                \\
    $file = File::Tail->new(name=>$b, interval=>1, maxinterval=>2);                                                        \\
    while(defined($log=$file->read)) {                                                                                     \\
      chomp $log;                                                                                                          \\
      if($log =~ /Build:\s(\d+)\ssucceeded,\s(\d+)\sfailed,\s(\d+)\sup-to-date/){                                          \\
        $total = $1 + $2 + $3;                                                                                             \\
        if($total > 7){ print "$log\n"; exit; }                                                                            \\
        else { print "$log\n" }                                                                                            \\
      }                                                                                                                    \\
      elsif($log =~ /Build started|error|fatal|failed/i) {                                                                 \\
        if(length($log) > 200){ $log = substr($log,0,200); }                                                               \\
        print "$log\n"                                                                                                     \\
      }                                                                                                                    \\
    }                                                                                                                      \\
 '"'"


##############################################################################
#######################         LOG VIEWING         ##########################



alias wglogfull 'ls -t $trimdir/$defArch/$defBuild/ServerLocalData/Log/TRIMWorkgroup* \\
 | head -1                                                                            \\
 | perl -ne '"'"' chomp; print "tail -f $_"; ' "' "'                                  \\
 | /bin/sh '

set LOGBASIC = "(SELECT\s+TOP\s+\d+.+FROM\s+TSEVENTDAT|"
set LOGBASIC = $LOGBASIC"SELECT.+FROM\s+TSTWRSYS\s+WITH)"

alias wglogbasic ' ls -t $trimdir/$defArch/$defBuild/ServerLocalData/Log/TRIMWorkgroup* \\
 | head -1                                                                              \\
 | perl -ne ' "' "' chomp; print "tail -f $_";  ' "' "'                                 \\
 | /bin/sh                                                                              \\
 | grep -Eiv $LOGBASIC ' 


set LOGSTART  = "("
set LOG1  = "SELECT\s+TOP\s+\d+.+FROM\s+(TSEVENTDAT|TSTODOITEM|TSWKACTIVI)"
set LOG2  = "|SELECT.+FROM\s+TSTWRSYS\s+WITH\s+\(NOLOCK\)\s+WHERE\s+\(\s+code\s+="
set LOG3  = ""
set LOG4  = "|SELECT\s+COUNT_BIG\(uri\)\s+FROM\s+TSRECORD\s+WITH\s+\(NOLOCK\)\s+WHERE\s+\(rcFilePlanUri"
set LOG5  = "|SELECT\s+uri,raRecordUri,raUnitUri,raDueDateTime\s+FROM\s+TSRECACTST\s+WITH\s+\(NOLOCK\)"
set LOG6  = "|UPDATE\s+TSTWRSYS\s+SET\s+value\s+=\s+"
set LOG7  = "|SELECT\s+uri\s+FROM\s+TSRECORD\s+WITH\s*\(NOLOCK\)\s*WHERE\s*\(\s*rcfileplanuri"
set LOG8  = "|SELECT\s+uri,rqRecordUri,rqLocUri,rqAt,rqHomeLocUri,rqDateCreated\s+FROM\s+TSRECREQUE"
set LOG9  = "|SELECT\s+uri,wacWorkflowUri,wacAssigneeUri,wacSupervisorUri,wacDueDate\s+FROM\s+TSWKACTIVI"
set LOG10 = "|INSERT\s+INTO\s+TSXMLDATA"
set LOGEND = ")"

alias wglog 'ls -t $trimdir/$defArch/$defBuild/ServerLocalData/Log/TRIMWorkgroup* \\
 | head -1                                                                        \\
 | perl -ne ' "' "' chomp; print "tail -f $_";  ' "' "'                           \\
 | /bin/sh                                                                        \\
 | grep -Eiv "$LOGSTART$LOG1$LOG2$LOG3$LOG4$LOG5$LOG6$LOG7$LOG8$LOG9$LOG10$LOGEND" '


alias cleanlog  ' cat \!^                                                                                                                                       \\
 | perl -e ' "' "'                                                                                                                                           \\
    $| = 1;                                                                                                                                                       \\
   while(<>){                                                                                                                                                     \\
      chomp;                                                                                                                                                      \\
      /select\s+top\s+\d+\s+uri\s+from\s+tseventdat/i and next;                                                                                                    \\
      /SELECT\s+\*\s+FROM\s+TSTWRSYS\s+WITH\s+\(NOLOCK\)\s+WHERE\s+\(code\s+=/i and next;                                                                         \\
      /SELECT\s+TOP\s+\d+\s+\*\s+FROM\s+TSTODOITEM\s+WITH\s+\(NOLOCK\)\s+WHERE\s+\(tdoDoneAt/i and next;                                                           \\
      /SELECT\s+uri,edDateTime,edEventType.+FROM\sTSEVENTDAT.+rownum\s<\s\d+/i and next;                                                                          \\
      /SELECT\s+uri,edDateTime,edEventType.+FROM\sTSEVENTDAT WHERE uri IN\s+\( SELECT TOP \d+ uri FROM TSEVENTDAT/i and next;                                     \\
      /SELECT\s+COUNT_BIG\(uri\)\s+ FROM\s+TSRECORD\s+WITH\s+\(NOLOCK\)\s+WHERE\s+\(rcFilePlanUri/i and next;                                                     \\
      /SELECT\s+uri,raRecordUri,raUnitUri,raDueDateTime\s+FROM\s+TSRECACTST\s+WITH\s+\(NOLOCK\)/i and next;                                                       \\
      /SELECT\s+uri,wacWorkflowUri,wacAssigneeUri,wacSupervisorUri,wacDueDate\s+FROM\s+TSWKACTIVI/i and next;                                                     \\
      /UPDATE\s+TSTWRSYS\s+SET\s+value\s+=\s+/i and next;                                                                                                         \\
      /SELECT\s+\*\s+ FROM\s+TSTASK\s+WITH\s+\(NOLOCK\)\s+WHERE\s+\(tkTriggerDate/i and next;                                                                     \\
      /select\s+uri\s+from\s+tsrecord\s+with\s+\(nolock\)\s+where\s+\(rcfileplanuri/i and next;                                                                   \\
      /SELECT\s+TOP\s+\d+\s+A0.uri,A0.wesEscalatedOn,A0.wesEscalatedToUri,A0.wesActivityUri,A0.wesWaitSecs,A1.wacDueDate\s+FROM\s+TSWKESCALA/i and next;           \\
      /SELECT\s+uri,rqRecordUri,rqLocUri,rqAt,rqHomeLocUri,rqDateCreated\s+FROM\s+TSRECREQUE\s+WITH\s+\(NOLOCK\)\s+WHERE\s+\(rqDateCreated\s+BETWEEN /i and next; \\
      /ExecTransaction:[\w-]+:\d+\s+EvpLastRunDate\s*$/i and next;                                                                                                \\
      /logout:\s+machine=.+,\s+username=.+/i and next;                                                                                                            \\
      /RCF\s+client\s+has\s+disconnected\s+from\s+I_WorkgroupService.\s+RCF\s+session:/i and next;                                                                \\
      #//i and next;     \\
      #//i and next;     \\
      print "$_\n";                                                                                                                                               \\
   } ' "' "'                                                                                                                                                      \\
 > wg_log_clean.txt '

