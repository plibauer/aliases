##############################################################################
#  BUILD ALIASES 
#
#

set logSeparator    = "\n----------------------------------------------------------------------------------------------------"

alias nuke             'gosln;./NukeSolutions.bat'
alias gensln           'gosln;./GenerateSolutions.bat'
alias nukeandgen       'nuke;gensln'
alias touchcopy        'touch $var_trimDir/trim/src/CopyFiles/CopyFiles.cpp'
alias copyfilescs      'cygstart cmd.exe /c $var_trimDir/trim/CSharp/TRIMCsBuild/CopyFilesPreBuild.bat $var_trimDir/AnyCPU/$var_defBuild $var_defBuild'
alias bldlog           'tail -f $var_buildLog.build'
alias bldlogcs         'tail -f $var_buildLogCSharp.build'
alias bldlogwix        'tail -f $var_buildLogWix'
alias bldall           'date; bldsln; bldcsharp; bldwix; date'
alias kbldall          'killboth; bldall'
alias bldboth          'release; bldsln; debug; bldsln'
alias clnboth	       'release; clnsln; debug; clnsln'
alias cleanbuild       'clnsln; bldsln'
alias cleanbuildboth   'clnboth; bldboth'
alias clnbldboth       cleanbuildboth
alias clnall           'clnsln; clncsharp; clnwix'
alias clnallboth       'release; clnall; debug; clnall'
alias logs             'golog; xt "TRIMWorkgroupServer log";golog;  xt "TRIMEvent log"; golog;  xt "TRIMDCI log"'
alias rmlogs           'rm $var_trimDir/$var_defArch/$var_defBuild/ServerLocalData/Log/*.log'
alias rmlogsboth       'rm $var_trimDir/$var_defArch/{Debug,Release}/ServerLocalData/Log/*.log'
alias rmlogslocal      'golocallog; rm -f *.log; back' 

# Search for which project a source module belongs to
alias findproject      'setenv PROJSRCH \!^; grep -is -A 1 \!^ $var_trimDir/trim/sln/TRIM/x64/*/*.filters   \\
 | $PERL -e '"'"' use Term::ANSIColor qw(:constants :constants256); \\
@input = <>; $i = 0;                                                \\
for(@input) {                                                       \\
  my $projects;                                                     \\
  my $srch = $ENV{PROJSRCH};                                        \\
  chomp;                                                            \\
  if (/TRIM.x64.([\w\.]+)\/.+filters:\s+.+include="(.+)">$/i) {     \\
    ($proj,$file) = ($1,$2);                                        \\
    if($file =~ /\\([^\\]+)$/) {                                    \\
      $filename = $1;                                               \\
      if($filename =~ /$srch/i) {                                   \\
        # See if there is a folder                                  \\
        $folder = "";                                               \\
        if($input[$i + 1] =~ /<filter>(.+)</i) {                    \\
           $folder = $1;                                            \\
        }                                                           \\
        push @{$projects{$proj}}, {f => $file, folder => $folder};  \\
      }                                                             \\
    }                                                               \\
  }                                                                 \\
  ++$i;                                                             \\
}                                                                   \\
for(sort keys %projects) {                                          \\
  print BOLD, YELLOW, "$_\n", RESET ;                               \\
  $mods = $projects{$_};                                            \\
  for(sort @$mods) {                                                \\
    print "  ".$_->{f}." [", BOLD, CYAN, $_->{folder}, RESET,"]\n"; \\
  }                                                                 \\
}                                                                   \\
 '"'" 
alias fproj             findproject
alias findproj          findproject
alias projfind          findproject

alias dcilog            'ls -t $var_trimDir/$var_defArch/$var_defBuild/ServerLocalData/Log/DCI_$var_DBID* \\
 | head -1                                                                                                \\
 | $PERL -ne '"'"' chomp; print "tail -f $_";  '"'"'                                                      \\
 | /bin/sh '

alias evlog_clean "cat \!^                              |\\
grep -v 'No events waiting at workgroup'                |\\
grep -v 'processing  buffered events' > event_log.clean"

alias evlogfilt 'ls -t $var_trimDir/$var_defArch/$var_defBuild/ServerLocalData/Log/TRIMEvent* \\
 | head -1                                                                  \\
 | $PERL -ne '"'"' chomp; print "tail -f $_";  '"'"'                        \\
 | /bin/sh                                                                  \\
 | egrep -iv "processing  buffered events | No events waiting at workgroup" '

alias evlog 'ls -t $var_trimDir/$var_defArch/$var_defBuild/ServerLocalData/Log/TRIMEvent_$var_DBID* \\
 | head -1                                                                  \\
 | $PERL -ne '"'"' chomp; print "tail -f $_";  '"'"'                        \\
 | /bin/sh '
 
alias evlogidol 'ls -t $var_trimDir/$var_defArch/$var_defBuild/ServerLocalData/Log/TRIMEvent_$var_idolDBID* \\
 | head -1                                                                  \\
 | $PERL -ne '"'"' chomp; print "tail -f $_";  '"'"'                        \\
 | /bin/sh '
 
alias idxlog 'ls -t $var_trimDir/$var_defArch/$var_defBuild/ServerLocalData/Log/IDX_$var_DBID* \\
 | head -1                                                                  \\
 | $PERL -ne '"'"' chomp; print "tail -f $_";  '"'"'                        \\
 | /bin/sh '


alias buildtest1  ' echo $logSeparator; date;                                           \\
   echo "TEST build alias";                                                             \\
   echo "$var_devenvexe,TD=$var_trimDir,DA=$var_defArch,DB=$var_defBuild,BL=$var_buildLog.build"\\
'

alias buildtest2  'buildtest1                                                                   \\
 | $PERL -ne '  "'  "' s/^(.):./\/$1\//;  s/\s/\\ /g; s/\(/\\(/g; s/\)/\\)/g; print "$_\n" '"'"'\\
 | $PERL -e ' "' "'                                                                             \\
      @l = <>;                                                                                  \\
      $line = shift @l;                                                                         \\
                                                                                                \\
      chomp $line; $line =~ s/\\\s$//; print "INPUT: $line\n";                                  \\
                                                                                                \\
      if($line =~ /.exe,TD=(.+),DA=(.+),DB=(.+),BL=(.+)/) {                                     \\
        chomp $line;                                                                            \\
        $td=$1;$da=$2;$db=$3;$bl=$4;                                                            \\
        $line =~ s/.exe(,.+)/.exe/;                                                             \\
        $ver=$td; $ver =~ s/^.:.//;                                                             \\
      }                                                                                         \\
      print "touch $bl\n$line $td/trim/sln/TRIM/$da/TRIM.sln /build $db /project ALL_BUILD /out $bl &\n"  \\
 '"'"

#  TURN OFF OFFICE ADDIN LOADING AFTER A CSHARP BUILD
alias noaddins ' $PERL -e ' "' "'                                                   \\
   %addins = (Excel        => "HP.HPRM.OfficeIntegration.Excel",                    \\
              "MS Project" => "HP.HPRM.OfficeIntegration.Project",                  \\
              Outlook      => "HP.HPRM.OfficeIntegration.Outlook",                  \\
              PowerPoint   => "HP.HPRM.OfficeIntegration.PowerPoint",               \\
              Word         => "HP.HPRM.OfficeIntegration.Word");                    \\
  for (sort keys %addins) {                                                         \\
     my $key = "HKCU\\Software\\Microsoft\\Office\\".$_."\\Addins\\".$addins{$_};   \\
     print "Updated load behaviour for Addin $_ : ";                                \\
     print `REG ADD "$key" /v LoadBehavior /t REG_DWORD /d 0 /f`;                   \\
  }                                                                                 \\
 '"'"
 
alias addins   ' $PERL -e ' "' "'                                                   \\
   %addins = (Excel        => "HP.HPRM.OfficeIntegration.Excel",                    \\
              "MS Project" => "HP.HPRM.OfficeIntegration.Project",                  \\
              Outlook      => "HP.HPRM.OfficeIntegration.Outlook",                  \\
              PowerPoint   => "HP.HPRM.OfficeIntegration.PowerPoint",               \\
              Word         => "HP.HPRM.OfficeIntegration.Word");                    \\
  for (sort keys %addins) {                                                         \\
     my $key = "HKCU\\Software\\Microsoft\\Office\\".$_."\\Addins\\".$addins{$_};   \\
     print `REG QUERY "$key" /v LoadBehavior`;                                      \\
  }                                                                                 \\
 '"'"

alias checkForSolution 'echo $var_trimDir/trim/sln/TRIM/$var_defArch/TRIM.sln   \\
 | $PERL -ne '  "'  "'                                                          \\
   chomp;                                                                       \\
   if (not -e $_){                                                              \\
      print "\n  ***  $_ NOT FOUND!  *** \n\n"                                  \\
   }                                                                            \\
 '"'"

alias buildsolution '  echo $logSeparator; date;                                                         \\
   echo -n "$var_devenvexe,TD=$var_trimDir,DA=$var_defArch,DB=$var_defBuild,BL=$var_buildLog.build"      \\
 | $PERL -ne '  "'  "' s/^(.):./\/$1\//;  s/\s/\\ /g; s/\(/\\(/g; s/\)/\\)/g; print "$_\n"  '"'"'        \\
 | $PERL -e ' "' "'                                                                                      \\
      @l = <>;                                                                                           \\
      $line = shift @l;                                                                                  \\
      chomp $line;                                                                                       \\
      $line =~ s/\\\s+$//;                                                                               \\
      if($line =~ /.exe,TD=(.+),DA=(.+),DB=(.+),BL=(.+)/) {                                              \\
        $td=$1;$da=$2;$db=$3;$bl=$4;                                                                     \\
        $line =~ s/.exe(,.+)/.exe/;                                                                      \\
        $ver=$td; $ver =~ s/^.:.//;                                                                      \\
        open T,">$bl.cmd_line";                                                                          \\
        print T "$line $td/trim/sln/TRIM/$da/TRIM.sln /build $db /project ALL_BUILD /out $bl\n";         \\
        close T;                                                                                         \\
      }                                                                                                  \\
      else {                                                                                             \\
        print "echo \"Invalid input : $line?\"";                                                         \\
        exit;                                                                                            \\
      }                                                                                                  \\
      print "touch $bl\n$line $td/trim/sln/TRIM/$da/TRIM.sln /build $db /project ALL_BUILD /out $bl &\n" \\
 ' "' "'                                                                                                 \\
 | dos2unix | /bin/sh                                                                                    \\
 | $PERL -le "print q{$var_buildLog.build :: $var_trimDir}"                                              \\
 | $PERL -e ' "' "'                                                                                      \\
      $| = 1;                                                                                            \\
      use File::Tail;                                                                                    \\
      @in = <>; $i = shift @in; chomp $i;                                                                \\
      if($i =~ /^(.+) :: (.+)$/){ $b=$1; $ver=$2 }                                                       \\
      $ver =~ s/^.:.//;                                                                                  \\
      # print the command line to console                                                                \\
      open C, "$b.cmd_line"; @cl = <C>; close C;                                                         \\
      print "COMMAND LINE: @cl";                                                                         \\
      print "LOG FILE    : $b\n";                                                                        \\
      $file = File::Tail->new(name=>$b, interval=>1);                                                    \\
      while(defined($log=$file->read)) {                                                                 \\
        chomp $log;                                                                                      \\
        if($log =~ /^={10}\s+Build:/){                                                                   \\
           print "$log\n";                                                                               \\
           exit;                                                                                         \\
        }                                                                                                \\
        elsif($log =~ /\s(warning|error|fatal|failed)\s|>Error:/i) {                                     \\
          if(length($log) > 200){ $log = substr($log,0,200); }                                           \\
          print "$log\n"                                                                                 \\
        }                                                                                                \\
        elsif($log =~ /(\d+)>(-+) (Build started.+)$/i) {                                                \\
          ($no,$sep,$rest) = ($1,$2,$3);                                                                 \\
          if($no =~ /^.$/){                                                                              \\
            $sep .= "-";                                                                                 \\
          }                                                                                              \\
          print "$no>$sep $rest\n";                                                                      \\
        }                                                                                                \\
        elsif($log =~ /^(\d+)>.+vcxproj -> (.+)$/i) {                                                    \\
          ($no,$bin) = ($1,$2);                                                                          \\
          chomp $bin;                                                                                    \\
          $bin =~ s/^.+\\([^\\]+)$/$1/;                                                                  \\
          $space = "                     ";                                                              \\
          if($no =~ /^.$/){                                                                              \\
            $space .= " ";                                                                               \\
          }                                                                                              \\
          print "$no>$space"."Finished: $bin\n";                                                         \\
        }                                                                                                \\
      }                                                                                                  \\
 '"'"
 
alias bldsln "checkForSolution; buildsolution; date"
alias kbldsln "killboth; bldsln"

alias clnsln '    echo $logSeparator; date;                                                           \\
    echo -n "$var_devenvexe,TD=$var_trimDir,DA=$var_defArch,DB=$var_defBuild,BL=$var_buildLog.clean"  \\
 | $PERL -ne '  "'  "' s/^(.):./\/$1\//;  s/\s/\\ /g; s/\(/\\(/g; s/\)/\\)/g; print "$_\n" '"'"'      \\
 | $PERL -e ' "' "'                                                                                   \\
    @l = <>;                                                                                          \\
    $line = shift @l;                                                                                 \\
    if($line =~ /.exe,TD=(.+),DA=(.+),DB=(.+),BL=(.+)/){                                              \\
      chomp $line;                                                                                    \\
      $td=$1;$da=$2;$db=$3;$bl=$4;                                                                    \\
      $line =~ s/.exe(,.+)/.exe/;                                                                     \\
      $ver=$td; $ver =~ s/^.:.//;                                                                     \\
    }                                                                                                 \\
    print "touch $bl\n$line $td/trim/sln/TRIM/$da/TRIM.sln /clean $db /project ALL_BUILD /out $bl &\n"\\
 ' "' "'                                                                                              \\
 | dos2unix | /bin/sh                                                                                 \\
 | $PERL -le "print q{$var_buildLog.clean :: $var_trimDir}"                                           \\
 | $PERL -e ' "' "'                                                                                   \\
    $| = 1;                                                                                           \\
    use File::Tail;                                                                                   \\
    @in = <>;                                                                                         \\
    $i = shift @in;                                                                                   \\
    chomp $i;                                                                                         \\
    if($i =~ /^(.+) :: (.+)$/){ $b=$1; $ver=$2 }                                                      \\
    $ver =~ s/^.:.//;                                                                                 \\
    print "LOG FILE: $b\n";                                                                           \\
    $file = File::Tail->new(name=>$b, interval=>1);                                                   \\
    while(defined($log=$file->read)) {                                                                \\
      chomp $log;                                                                                     \\
      if($log    =~ /Clean:\s\d+\ssucceeded,\s\d+\sfailed/){ print "$log\n"; exit; }                  \\
      elsif($log =~ /Clean started|Deleting|error|fatal|failed/i) {                                   \\
        if(length($log) > 200){ $log = substr($log,0,200); }                                          \\
        print "$log\n"                                                                                \\
      }                                                                                               \\
    }                                                                                                 \\
 '" '"

alias buildcsharp 'echo $logSeparator; date;                                                                \\
    echo -n "$var_devenvexe,TD=$var_trimDir,DA=$var_defArch,DB=$var_defBuild,BL=$var_buildLogCSharp.build"  \\
 | $PERL -ne '  "'  "' s/^(.):./\/$1\//;  s/\s/\\ /g; s/\(/\\(/g; s/\)/\\)/g; print "$_\n" '"'"'            \\
 | $PERL -e ' "' "'                                                                                         \\
     @l = <>;                                                                                               \\
    $line = shift @l;                                                                                       \\
    if($line =~ /.exe,TD=(.+),DA=(.+),DB=(.+),BL=(.+)/){                                                    \\
      chomp $line;                                                                                          \\
      $td=$1;$da=$2;$db=$3;$bl=$4;                                                                          \\
      $line =~ s/.exe(,.+)/.exe/;                                                                           \\
      $ver=$td; $ver =~ s/^.:.//;                                                                           \\
    }                                                                                                       \\
    print "touch $bl\n$line $td/trim/TRIMCSharp.sln /build $db /out $bl &\n" '"'"'                          \\
 | dos2unix | /bin/sh                                                                                       \\
 | $PERL -le "print q{$var_buildLogCSharp.build :: $var_trimDir}"                                           \\
 | $PERL -e ' "' "'                                                                                         \\
    $| = 1;                                                                                                 \\
    use File::Tail;                                                                                         \\
    @in = <>;                                                                                               \\
    $i = shift @in;                                                                                         \\
    chomp $i;                                                                                               \\
    if($i =~ /^(.+) :: (.+)$/){ $b=$1; $ver=$2 }                                                            \\
    $ver =~ s/^.:.//;                                                                                       \\
    print "LOG FILE: $b\n";                                                                                 \\
    $file = File::Tail->new(name=>$b, interval=>1);                                                         \\
    while(defined($log=$file->read)) {                                                                      \\
        chomp $log;                                                                                         \\
        if($log =~ /^={10}\s+Build:/){                                                                      \\
           print "$log\n";                                                                                  \\
           exit;                                                                                            \\
        }                                                                                                   \\
        elsif($log =~ /^\d+>-+ Build started|\serror\s|\sfatal\s|\sfailed\s/i) {                            \\
          if(length($log) > 200){ $log = substr($log,0,200); }                                              \\
          print "$log\n"                                                                                    \\
        }                                                                                                   \\
    }                                                                                                       \\
 '"'"
alias bldcsharp 'buildcsharp; noaddins'
alias kbldcsharp "killboth; bldcsharp"

alias clncsharp 'echo $logSeparator;                                                                        \\
    echo -n "$var_devenvexe,TD=$var_trimDir,DA=$var_defArch,DB=$var_defBuild,BL=$var_buildLogCSharp.clean"  \\
 | $PERL -ne '  "'  "' s/^(.):./\/$1\//;  s/\s/\\ /g; s/\(/\\(/g; s/\)/\\)/g; print "$_\n"  ' "' "'         \\
 | $PERL -e ' "' "'                                                                                         \\
    @l = <>;                                                                                                \\
    $line = shift @l;                                                                                       \\
    if($line =~ /.exe,TD=(.+),DA=(.+),DB=(.+),BL=(.+)/){                                                    \\
      chomp $line;                                                                                          \\
      $td=$1;$da=$2;$db=$3;$bl=$4;                                                                          \\
      $line =~ s/.exe(,.+)/.exe/;                                                                           \\
      $ver=$td;                                                                                             \\
      $ver =~ s/^.:.//;                                                                                     \\
    }                                                                                                       \\
    print "touch $bl\n$line $td/trim/TRIMCSharp.sln /clean $db /out $bl &\n" ' "' "'                        \\
 | dos2unix | /bin/sh                                                                                       \\
 | $PERL -le "print q{$var_buildLogCSharp.clean :: $var_trimDir}"                                           \\
 | $PERL -e ' "' "'                                                                                         \\
    $| = 1;                                                                                                 \\
    use File::Tail;                                                                                         \\
    @in = <>;                                                                                               \\
    $i = shift @in;                                                                                         \\
    chomp $i;                                                                                               \\
    if($i =~ /^(.+) :: (.+)$/){ $b=$1; $ver=$2 }                                                            \\
    $ver =~ s/^.:.//;                                                                                       \\
    print "LOG FILE: $b\n";                                                                                 \\
    $file = File::Tail->new(name=>$b, interval=>0);                                                         \\
    while(defined($log=$file->read)) {                                                                      \\
      chomp $log;                                                                                           \\
      if($log    =~ /Clean:\s\d+\ssucceeded,\s\d+\sfailed/){ print "$log\n"; exit; }                        \\
      elsif($log =~ /Clean started|Deleting|error|fatal|failed/i) {                                         \\
        if(length($log) > 200){ $log = substr($log,0,200); }                                                \\
        print "$log\n"                                                                                      \\
      }                                                                                                     \\
    }                                                                                                       \\
 '"'"

alias bldwix 'echo $logSeparator; date;                                                                 \\
    echo -n "$var_devenvexe,TD=$var_trimDir,DA=$var_defArch,DB=$var_defBuild,BL=$var_buildLogWix.build" \\
 | $PERL -ne '  "'  "' s/^(.):./\/$1\//;  s/\s/\\ /g; s/\(/\\(/g; s/\)/\\)/g; print "$_\n" '"'"'        \\
 | $PERL -e ' "' "'                                                                                     \\
    @l = <>;                                                                                            \\
    $line = shift @l;                                                                                   \\
    if($line =~ /.exe,TD=(.+),DA=(.+),DB=(.+),BL=(.+)/){                                                \\
      chomp $line;                                                                                      \\
      $td=$1;$da=$2;$db=$3;$bl=$4;                                                                      \\
      $line =~ s/.exe(,.+)/.exe/;                                                                       \\
      $ver=$td; $ver =~ s/^.:.//;                                                                       \\
    }                                                                                                   \\
    print "touch $bl\n$line $td/trim/WIX.sln /build \"$db|$da\" /out $bl &\n" '"'"'                     \\
 | dos2unix | /bin/sh                                                                                   \\
 | $PERL -le "print q{$var_buildLogWix.build :: $var_trimDir}"                                          \\
 | $PERL -e ' "' "'                                                                                     \\
    $| = 1;                                                                                             \\
    use File::Tail;                                                                                     \\
    @in = <>;                                                                                           \\
    $i = shift @in;                                                                                     \\
    chomp $i;                                                                                           \\
    if($i =~ /^(.+) :: (.+)$/){ $b=$1; $ver=$2 }                                                        \\
    $ver =~ s/^.:.//;                                                                                   \\
    print "LOG FILE: $b\n";                                                                             \\
    $file = File::Tail->new(name=>$b, interval=>1);                                                     \\
    while(defined($log=$file->read)) {                                                                  \\
      chomp $log;                                                                                       \\
        if($log =~ /^={10}\s+Build:/){                                                                  \\
           print "$log\n";                                                                              \\
           exit;                                                                                        \\
        }                                                                                               \\
        elsif($log =~ /^\d+>-+ Build started|\serror\s|\sfatal\s|\sfailed\s/i) {                        \\
          if(length($log) > 200){ $log = substr($log,0,200); }                                          \\
          print "$log\n"                                                                                \\
        }                                                                                               \\
    }                                                                                                   \\
 '"'"

alias bldwixproj 'echo $logSeparator; date;                                                                      \\
    echo -n "$var_devenvexe,TD=$var_trimDir,DA=$var_defArch,DB=$var_defBuild,BL=$var_buildLogWix.proj,PROJ=\!:1" \\
 | $PERL -ne '  "'  "' s/^(.):./\/$1\//;  s/\s/\\ /g; s/\(/\\(/g; s/\)/\\)/g; print "$_\n" '"'"'                 \\
 | $PERL -e ' "' "'                                                                                              \\
    @l = <>;                                                                                                     \\
    $line = shift @l;                                                                                            \\
    if($line =~ /.exe,TD=(.+),DA=(.+),DB=(.+),BL=(.+),PROJ=(.+)/){                                               \\
      chomp $line;                                                                                               \\
      $td=$1;$da=$2;$db=$3;$bl=$4;$proj=$5;                                                                      \\
      $line =~ s/.exe(,.+)/.exe/;                                                                                \\
      $ver=$td; $ver =~ s/^.:.//;                                                                                \\
                                                                                                                 \\
      open T, ">$bl.cmd_line";                                                                                   \\
      print T "$line $td/trim/WIX.sln /build \"$db|$da\" /project $proj /out $bl";                               \\
      close T;                                                                                                   \\
    }                                                                                                            \\
    else {                                                                                                       \\
      print "echo \"Invalid input : $line?\"";                                                                   \\
      exit;                                                                                                      \\
    }                                                                                                            \\
    print "touch $bl\n$line $td/trim/WIX.sln /build \"$db|$da\" /project $proj /out $bl &\n" '"'"'               \\
 | dos2unix | /bin/sh                                                                                            \\
 | $PERL -le "print q{$var_buildLogWix.proj :: $var_trimDir}"                                                    \\
 | $PERL -e ' "' "'                                                                                              \\
    $| = 1;                                                                                                      \\
    use File::Tail;                                                                                              \\
    @in = <>;                                                                                                    \\
    $i = shift @in;                                                                                              \\
    chomp $i;                                                                                                    \\
    if($i =~ /^(.+) :: (.+)$/){ $b=$1; $ver=$2 }                                                                 \\
    $ver =~ s/^.:.//;                                                                                            \\
                                                                                                                 \\
    # print the command line to console                                                                          \\
    open C, "$b.cmd_line"; @cl = <C>; close C;                                                                   \\
    print "COMMAND LINE: @cl";                                                                                   \\
                                                                                                                 \\
    print "LOG FILE: $b\n";                                                                                      \\
    $file = File::Tail->new(name=>$b, interval=>1);                                                              \\
    while(defined($log=$file->read)) {                                                                           \\
        chomp $log;                                                                                              \\
        if($log =~ /^={10}\s+Build:/){                                                                           \\
           print "$log\n";                                                                                       \\
           exit;                                                                                                 \\
        }                                                                                                        \\
        elsif($log =~ /^\d+>-+ Build started|\serror\s|\sfatal\s|\sfailed\s/i) {                                 \\
          if(length($log) > 200){ $log = substr($log,0,200); }                                                   \\
          print "$log\n"                                                                                         \\
        }                                                                                                        \\
    }                                                                                                            \\
 '"'"

alias bldsetup "bldwixproj SetupExecutable"

alias clnwix 'echo $logSeparator;                                                                       \\
    echo -n "$var_devenvexe,TD=$var_trimDir,DA=$var_defArch,DB=$var_defBuild,BL=$var_buildLogWix.clean" \\
 | $PERL -ne '  "'  "' s/^(.):./\/$1\//;  s/\s/\\ /g; s/\(/\\(/g; s/\)/\\)/g; print "$_\n" '"'"'        \\
 | $PERL -e ' "' "'                                                                                     \\
    @l = <>;                                                                                            \\
    $line = shift @l;                                                                                   \\
    if($line =~ /.exe,TD=(.+),DA=(.+),DB=(.+),BL=(.+)/){                                                \\
      chomp $line;                                                                                      \\
      $td=$1;$da=$2;$db=$3;$bl=$4;                                                                      \\
      $line =~ s/.exe(,.+)/.exe/;                                                                       \\
      $ver=$td;                                                                                         \\
      $ver =~ s/^.:.//;                                                                                 \\
    }                                                                                                   \\
    print "touch $bl\n$line $td/trim/WIX.sln /clean \"$db|$da\" /out $bl &\n" '"'"'                     \\
 | dos2unix | /bin/sh                                                                                   \\
 | $PERL -le "print q{$var_buildLogWix.clean :: $var_trimDir}"                                          \\
 | $PERL -e ' "' "'                                                                                     \\
    $| = 1;                                                                                             \\
    use File::Tail;                                                                                     \\
    @in = <>;                                                                                           \\
    $i = shift @in;                                                                                     \\
    chomp $i;                                                                                           \\
    if($i =~ /^(.+) :: (.+)$/){ $b=$1; $ver=$2 }                                                        \\
    $ver =~ s/^.:.//;                                                                                   \\
    print "LOG FILE: $b\n";                                                                             \\
    $file = File::Tail->new(name=>$b, interval=>1);                                                     \\
    while(defined($log=$file->read)) {                                                                  \\
      chomp $log;                                                                                       \\
      if($log    =~ /Clean:\s\d+\ssucceeded,\s\d+\sfailed/){ print "$log\n"; exit; }                    \\
      elsif($log =~ /Clean started|Deleting|error|fatal|failed/i) {                                     \\
        if(length($log) > 200){ $log = substr($log,0,200); }                                            \\
        print "$log\n"                                                                                  \\
      }                                                                                                 \\
    }                                                                                                   \\
 '"'"

alias checkFor3rdParty 'echo $var_trimDir/trim/sln/ThirdPartySource/$var_defArch/ThirdPartySource.sln \\
 | $PERL -ne '"'"'                                                                                    \\
   chomp;                                                                                             \\
   if (not -e $_){                                                                                    \\
      print "\n  ***  $_ NOT FOUND!  *** \n\n"                                                        \\
   }                                                                                                  \\
 '"'"

alias build3rdParty '  echo $logSeparator; date;                                                       \\
   echo -n "$var_devenvexe,TD=$var_trimDir,DA=$var_defArch,DB=$var_defBuild,BL=$var_buildLog.3rdParty" \\
 | $PERL -ne '  "'  "' s/^(.):./\/$1\//;  s/\s/\\ /g; s/\(/\\(/g; s/\)/\\)/g; print "$_\n" '"'"'       \\
 | $PERL -e ' "' "'                                                                                    \\
      @l = <>;                                                                                         \\
      $line = shift @l;                                                                                \\
      chomp $line;                                                                                     \\
      $line =~ s/\\\s+$//;                                                                             \\
      if($line =~ /.exe,TD=(.+),DA=(.+),DB=(.+),BL=(.+)/) {                                            \\
        $td=$1;$da=$2;$db=$3;$bl=$4;                                                                   \\
        $line =~ s/.exe(,.+)/.exe/;                                                                    \\
        $ver=$td; $ver =~ s/^.:.//;                                                                    \\
        open T,">$bl.cmd_line";                                                                        \\
        print T "$line $td/trim/sln/ThirdPartySource/$da/ThirdPartySource.sln ".                       \\
                "/build $db /project ALL_BUILD /out $bl\n";                                            \\
        close T;                                                                                       \\
      }                                                                                                \\
      else {                                                                                           \\
        print "echo \"Invalid input : $line?\"";                                                       \\
        exit;                                                                                          \\
      }                                                                                                \\
      print "touch $bl\n$line $td/trim/sln/ThirdPartySource/$da/ThirdPartySource.sln ".                \\
            "/build $db /project ALL_BUILD /out $bl &\n"                                               \\
 ' "'"'                                                                                                \\
 | dos2unix | /bin/sh                                                                                  \\
 | $PERL -le "print q{$var_buildLog.3rdParty :: $var_trimDir}"                                         \\
 | $PERL -e ' "' "'                                                                                    \\
      $| = 1;                                                                                          \\
      use File::Tail;                                                                                  \\
      @in = <>; $i = shift @in; chomp $i;                                                              \\
      if($i =~ /^(.+) :: (.+)$/){ $b=$1; $ver=$2 }                                                     \\
      $ver =~ s/^.:.//;                                                                                \\
      # print the command line to console                                                              \\
      open C, "$b.cmd_line"; @cl = <C>; close C;                                                       \\
      print "COMMAND LINE: @cl";                                                                       \\
      print "LOG FILE    : $b\n";                                                                      \\
      $file = File::Tail->new(name=>$b, interval=>1);                                                  \\
      while(defined($log=$file->read)) {                                                               \\
        chomp $log;                                                                                    \\
        if($log =~ /^={10}\s+Build:/){                                                                 \\
           print "$log\n";                                                                             \\
           exit;                                                                                       \\
        }                                                                                              \\
        elsif($log =~ /^\d+>-+ Build started|\serror\s|\sfatal\s|\sfailed\s/i) {                       \\
          if(length($log) > 200){ $log = substr($log,0,200); }                                         \\
          print "$log\n"                                                                               \\
        }                                                                                              \\
      }                                                                                                \\
 '"'"

################################################
# Build a specific project in a solution file
# ARG 1 : Path to solution file
# ARG 2 : Project name
# ARG 3 : build/clean
# ARG 4 : Architecture (AnyCPU/x86/x64/Win32)
# ARG 5 : Debug/Release
# ARG 6 : Name of log file
#
# NOTE: the redirection of STDERR following the $CMD_LINE 
#       before being passed to /bin/sh

alias bldproject 'echo $logSeparator; date; setenv PROJ_BUILD_LOG \!:6;                             \\
    echo -n "$var_devenvexe,ARG1=\!:1,ARG2=\!:2,ARG3=\!:3,ARG4=\!:4,ARG5=\!:5,ARG6=\!:6"            \\
 | $PERL -ne '  "'  "' s/^(.):./\/$1\//;  s/\s/\\ /g; s/\(/\\(/g; s/\)/\\)/g; print "$_\n" '"'"'    \\
 | $PERL -e ' "' "'                                                                                 \\
    @l = <>;                                                                                        \\
    $line = shift @l;                                                                               \\
    if($line =~ /.exe,ARG1=(.+),ARG2=(.+),ARG3=(.+),ARG4=(.+),ARG5=(.+),ARG6=(.+)/){                \\
      chomp $line;                                                                                  \\
      $SLN_FILE     = $1;                                                                           \\
      $PROJECT      = $2;                                                                           \\
      $BLD_OR_CLEAN = $3;                                                                           \\
      $ARCH         = $4;                                                                           \\
      $TYPE         = $5;                                                                           \\
      $LOG          = $6;                                                                           \\
      $line =~ s/.exe(,.+)$/.exe/;                                                                  \\
                                                                                                    \\
      $CMD_LINE = "$line $SLN_FILE /$BLD_OR_CLEAN \"$TYPE|$ARCH\" /project $PROJECT /out $LOG";     \\
      open T, ">$LOG.cmd_line";                                                                     \\
      print T $CMD_LINE."\n";                                                                       \\
      close T;                                                                                      \\
    }                                                                                               \\
    else {                                                                                          \\
      print "echo \"Invalid input : $line?\"";                                                      \\
      exit;                                                                                         \\
    }                                                                                               \\
    unlink($LOG);                                                                                   \\
    print "touch $LOG\n$CMD_LINE 2>&1 &\n" '"'"'                                                    \\
 | dos2unix | /bin/sh                                                                               \\
 | $PERL -e ' "' "'                                                                                 \\
    $| = 1;                                                                                         \\
    use File::Tail;                                                                                 \\
                                                                                                    \\
    $log = $ENV{PROJ_BUILD_LOG};                                                                    \\
    # print the command line to console                                                             \\
    open C, "$log.cmd_line"; @cl = <C>; close C;                                                    \\
    print "COMMAND LINE: @cl";                                                                      \\
                                                                                                    \\
    print "LOG FILE: $log\n";                                                                       \\
    $file = File::Tail->new(name=>$log, interval=>1);                                               \\
    while(defined($log=$file->read)) {                                                              \\
        chomp $log;                                                                                 \\
        if($log =~ /^={10}\s+(Build|Clean):/i){                                                     \\
           print "$log\n";                                                                          \\
           exit;                                                                                    \\
        }                                                                                           \\
        elsif($log =~ /^\d+>-+ (Build|Clean) started|\serror\s|\sfatal\s|\sfailed\s/i) {            \\
          if(length($log) > 200){ $log = substr($log,0,200); }                                      \\
          print "$log\n"                                                                            \\
        }                                                                                           \\
    }                                                                                               \\
'"'"

alias bldtrimproj 'bldproject $var_trimDir/trim/sln/TRIM/$var_defArch/TRIM.sln \!:1 build $var_defArch $var_defBuild $var_buildLog.build.proj' 
alias clntrimproj 'bldproject $var_trimDir/trim/sln/TRIM/$var_defArch/TRIM.sln \!:1 clean $var_defArch $var_defBuild $var_buildLog.clean.proj' 
alias bldcshproj  'bldproject $var_trimDir/trim/TrimCSharp.sln \!:1 build AnyCPU $var_defBuild $var_buildLogCSharp.build.proj' 
alias clncshproj  'bldproject $var_trimDir/trim/TrimCSharp.sln \!:1 clean AnyCPU $var_defBuild $var_buildLogCSharp.clean.proj' 

#  Build the combuilder solution separately since there are issues running the Finalbuild script
alias ddruncomcln   'rm $var_buildLogDir/DDrun_ComBuilder_Clean.log;                 \\
                    "$var_devenvexe" $var_trimDir/trim/src/com/combuilder.sln        \\
                                     /clean                                          \\
                                     "Debug|Win32"                                   \\
                                    /out $var_buildLogDir/DDrun_ComBuilder_Clean.log \\
                  | grep "Clean"'
alias ddrunclean    'ddruncomcln; cat $var_buildLogDir/DDrun_ComBuilder_Clean.log | grep "Clean"'
alias bldtypelib    'bldproject $var_trimDir/trim/src/com/combuilder.sln sdkTlb    build Win32 Debug $var_buildLogDir/DDrun_sdkTlb_proj.log'
alias bldimportlib  'bldproject $var_trimDir/trim/src/com/combuilder.sln sdkImport build Win32 Debug $var_buildLogDir/DDrun_sdkImport_proj.log'
alias ddruncom      'bldtypelib; bldimportlib'
alias ddruncomclean 'ddrunclean; bldtypelib; bldimportlib'

##############################################################################
#######################         LOG VIEWING         ##########################

alias wglogfull 'ls -t $var_trimDir/$var_defArch/$var_defBuild/ServerLocalData/Log/TRIMWorkgroup*   \\
 | head -1                                                                                          \\
 | $PERL -ne '"'"' chomp; print "tail -f $_"; '"'"'                                                 \\
 | /bin/sh '

set LOGBASIC = "(SELECT\s+TOP\s+\d+.+FROM\s+TSEVENTDAT|"
set LOGBASIC = $LOGBASIC"SELECT.+FROM\s+TSTWRSYS\s+WITH)"

alias wglogbasic ' ls -t $var_trimDir/$var_defArch/$var_defBuild/ServerLocalData/Log/TRIMWorkgroup* \\
 | head -1                                                                                          \\
 | $PERL -ne '"'"' chomp; print "tail -f $_";  '"'"'                                                \\
 | /bin/sh                                                                                          \\
 | grep -Eiv $LOGBASIC ' 


set LOGSTART  = "("
set LOG1  = "SELECT\s+TOP\s+\d+.+FROM\s+(TSEVENTDAT|TSTODOITEM|TSWKACTIVI)"
set LOG2  = "|SELECT.+FROM\s+TSTWRSYS\s+WITH\s+\(NOLOCK\)\s+WHERE\s+\(\s+code\s+="
set LOG3  = "|TSEVENTDAT WITH \(NOLOCK\)  WHERE uri IN  \( SELECT TOP 30 uri   FROM TSEVENTDAT WITH \(NOLOCK\)"
set LOG4  = "|SELECT\s+COUNT_BIG\(uri\)\s+FROM\s+TSRECORD\s+WITH\s+\(NOLOCK\)\s+WHERE\s+\(rcFilePlanUri"
set LOG5  = "|SELECT\s+uri,raRecordUri,raUnitUri,raDueDateTime\s+FROM\s+TSRECACTST\s+WITH\s+\(NOLOCK\)"
set LOG6  = "|UPDATE\s+TSTWRSYS\s+SET\s+value\s+=\s+"
set LOG7  = "|SELECT\s+uri\s+FROM\s+TSRECORD\s+WITH\s*\(NOLOCK\)\s*WHERE\s*\(\s*rcfileplanuri"
set LOG8  = "|SELECT\s+uri,rqRecordUri,rqLocUri,rqAt,rqHomeLocUri,rqDateCreated\s+FROM\s+TSRECREQUE"
set LOG9  = "|SELECT\s+uri,wacWorkflowUri,wacAssigneeUri,wacSupervisorUri,wacDueDate\s+FROM\s+TSWKACTIVI"
set LOG10 = "|INSERT\s+INTO\s+TSXMLDATA"
set LOG11 = "|SELECT\s+COUNT_BIG\(.\)\s+FROM\s+TSRENDQUEU\s+WITH\s+\(NOLOCK\)\s+WHERE\s+\(\s+rnqRenditionType"
set LOG12 = "|(Start|End)Transaction.+RenderHeartBeat"
set LOGEND = ")"

alias wglog 'ls -t $var_trimDir/$var_defArch/$var_defBuild/ServerLocalData/Log/TRIMWorkgroup*   \\
 | head -1                                                                                      \\
 | $PERL -ne '"'"' chomp; print "tail -f $_";  '"'"'                                            \\
 | /bin/sh                                                                                      \\
 | grep -Eiv "$LOGSTART$LOG1$LOG2$LOG3$LOG4$LOG5$LOG6$LOG7$LOG8$LOG9$LOG10$LOG11$LOG12$LOGEND" '


alias cleanlog  ' cat \!^                                                                                                     \\
 | $PERL -e ' "' "'                                                                                                           \\
    $| = 1;                                                                                                                   \\
   while(<>){                                                                                                                 \\
      chomp;                                                                                                                  \\
      /select\s+top\s+\d+\s+uri\s+from\s+tseventdat/i and next;                                                               \\
      /SELECT\s+\*\s+FROM\s+TSTWRSYS\s+WITH\s+\(NOLOCK\)\s+WHERE\s+\(code\s+=/i and next;                                     \\
      /SELECT\s+TOP\s+\d+\s+\*\s+FROM\s+TSTODOITEM\s+WITH\s+\(NOLOCK\)\s+WHERE\s+\(tdoDoneAt/i and next;                      \\
      /SELECT\s+uri,edDateTime,edEventType.+FROM\sTSEVENTDAT.+rownum\s<\s\d+/i and next;                                      \\
      /SELECT\s+uri,edDateTime,edEventType.+FROM\sTSEVENTDAT WHERE uri IN\s+\( SELECT TOP \d+ uri FROM TSEVENTDAT/i and next; \\
      /SELECT\s+COUNT_BIG\(uri\)\s+ FROM\s+TSRECORD\s+WITH\s+\(NOLOCK\)\s+WHERE\s+\(rcFilePlanUri/i and next;                 \\
      /SELECT\s+uri,raRecordUri,raUnitUri,raDueDateTime\s+FROM\s+TSRECACTST\s+WITH\s+\(NOLOCK\)/i and next;                   \\
      /SELECT\s+uri,wacWorkflowUri,wacAssigneeUri,wacSupervisorUri,wacDueDate\s+FROM\s+TSWKACTIVI/i and next;                 \\
      /UPDATE\s+TSTWRSYS\s+SET\s+value\s+=\s+/i and next;                                                                     \\
      /SELECT\s+\*\s+ FROM\s+TSTASK\s+WITH\s+\(NOLOCK\)\s+WHERE\s+\(tkTriggerDate/i and next;                                 \\
      /select\s+uri\s+from\s+tsrecord\s+with\s+\(nolock\)\s+where\s+\(rcfileplanuri/i and next;                               \\
      /SELECT\s+TOP\s+\d+\s+A0.uri,A0.wesEscalatedOn,A0.wesEscalatedToUri,A0.wesActivityUri,A0.wesWaitSecs,A1.wacDueDate\s+FROM\s+TSWKESCALA/i and next;          \\
      /SELECT\s+uri,rqRecordUri,rqLocUri,rqAt,rqHomeLocUri,rqDateCreated\s+FROM\s+TSRECREQUE\s+WITH\s+\(NOLOCK\)\s+WHERE\s+\(rqDateCreated\s+BETWEEN /i and next; \\
      /ExecTransaction:[\w-]+:\d+\s+EvpLastRunDate\s*$/i and next;                                                            \\
      /logout:\s+machine=.+,\s+username=.+/i and next;                                                                        \\
      /RCF\s+client\s+has\s+disconnected\s+from\s+I_WorkgroupService.\s+RCF\s+session:/i and next;                            \\
      #//i and next;                                                                                                          \\
      #//i and next;                                                                                                          \\
      print "$_\n";                                                                                                           \\
   } ' "'"'                                                                                                                   \\
 > wg_log_clean.txt '

