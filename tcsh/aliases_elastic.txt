##################################################################################################################
#                                                                                                                #
#     ELASTICSEARCH/elasticsearch Specific aliases                                                               #
#     This file should only be read once.                                                                        #
#                                                                                                                #
##################################################################################################################

alias goelastic		   'cd $ELASTIC_DIR'
alias elastichelp          'esperl --es_help'
alias eshelpsearch         'esperl --es_help_search'
alias eshelpauto           'esperl --es_help_ac'
alias eshelp               elastichelp
alias helpelastic          elastichelp
alias eshelppy             'esperl --es_help_py'

alias elasticblog         'vi $CLOUD_DIR/Work/elastic.txt; scrub $CLOUD_DIR/Work/elastic.txt' 
alias eblog               elasticblog
alias esinstall           '$ELASTIC_HOME/bin/elasticsearch-service.bat install'
alias esstart             '$ELASTIC_HOME/bin/elasticsearch-service.bat start'
alias esdemo              '$ELASTIC_HOME/bin/elasticsearch.bat'
alias esstop              '$ELASTIC_HOME/bin/elasticsearch-service.bat stop'
alias esremove            '$ELASTIC_HOME/bin/elasticsearch-service.bat remove'
alias esmanage            '$ELASTIC_HOME/bin/elasticsearch-service.bat manager'
alias esconfig            'cat $ELASTIC_HOME/config/elasticsearch.yml'
alias goes                'cd $ELASTIC_HOME'
alias elasticup           'usingport 9200'
alias elasticstatus       'elasticup; kibanaup'
alias esstatus            elasticstatus
alias eshost              'elastichost http://\!^'
alias eshostlocal         'elastichost http://localhost:9200'
alias esindex             elasticindex
alias esdefault           elasticdefault

alias setelasticservice  'set elastic_service_name =        \\
`sc query type= service state= all |                        \\
$PERL -ne "                                                 \\
  if (/^SERVICE_NAME: (elasticsearch-service.+)/i){         \\
    s/^SERVICE_NAME: //;                                    \\
    s/\n//;                                                 \\
    print;                                                  \\
  } "`'
alias startelasticsvc     'setelasticservice  && sc start $elastic_service_name'
alias stopelasticsvc      'setelasticservice  && sc stop $elastic_service_name'

# Find what java.exe process belongs to 
alias wmicjavaargs        'echo -n "path win32_process where \042name like \047java.exe\047\042 get Caption,Processid,Commandline"'
alias wmicjava           "/c/Windows/System32/wbem/WMIC.exe `wmicjavaargs`" 
alias javapaths           'wmicjava | perl -e '"'"'                         \\
my $c = 0;                                                                  \\
while (<>) {                                                                \\
  chomp;                                                                    \\
  if(/^(java.exe).+-Des.path.home=([^\s]+)\s.+\s(\d+)\s*$/){                \\
  ++$c;                                                                     \\
    $s = "$1\t$3\t$2\n";                                                    \\
    $s =~ s/\"//g;                                                          \\
    print "[$c] $s";                                                        \\
  }                                                                         \\
  elsif(/^(java.exe).+(\w:\\Elastic\\Logstash\\[\d\.]+)\\.+\s(\d+)\s*$/i){  \\
  ++$c;                                                                     \\
    print "[$c] $1\t$3\t$2\n"                                               \\
  }                                                                         \\
}                                                                           \\
print "\n(Use \"killjava <number>\" to end process)\n"                      \\
'"'"

alias killjava   '(echo \!* && javapaths) | perl -e '"'"'  \\
my @in = <>;                                               \\
my $num = shift @in;                                       \\
chomp $num;                                                \\
for(@in) {                                                 \\
  if(/^\[$num\]\s[\w\.]+\s+(\d+)\s+/) {                    \\
    print "Killing PID $1\n";                              \\
    print `taskkill /F /PID $1`;                           \\
  }                                                        \\
}                                                          \\
'"'"

# Convert WKS polygon string to GeoJSON
alias geojson      '$PERL -e '"'"'    \\
my $in = join "", @ARGV;              \\
chomp $in;                            \\
if($in =~ /^POLYGON\(\((.+)\)\)$/){   \\
  @c = split /,/,$1;                  \\
  my $str;                            \\
  for(@c){                            \\
    s/ /,/;                           \\
    $str .= "[$_],\n";                \\
  }                                   \\
  $str =~ s/,\n$/\n/;                 \\
  print "\n$str\n";                   \\
}                                     \\
'"' \!* "
alias wks2geojson         geojson

# Kibana
alias kibana              '$KIBANA_HOME/bin/kibana.bat && settitle2str KIBANA'
alias kibanaconfig        'cat $KIBANA_HOME/config/kibana.yml'
alias gokibana            'cd $KIBANA_HOME'
alias kibanaup            'usingport 5601'

# Logstash
alias gologstash          'cd $LOGSTASH_HOME'
alias logstash            '$LOGSTASH_HOME/bin/logstash.bat'

# Beats
alias gobeats             'cd $BEATS_HOME'
alias filebeat            '$BEATS_HOME/filebeat.exe'

# Format JSON document using single quotes for C++ string definitions
alias jsonsingle          'cat \!^ | $PERL -ne '"'"' s/"/\047/g; print '"'"
alias cleanjson           '$PERL -ne '"'"'  s/\\//g; print '"'"

set CURL = "curl -s"
set ELASTIC_QUERIES     = $env_alias_dir/elastic_queries.txt
set ELASTIC_SVN_QUERIES = $env_alias_dir/elastic_svn_queries.txt

# Querying Elastic
alias elasticversion      '$CURL \!^ | grep number | sed -E '"'"' s/number/VERSION/; s/[\",]//g; s/^\s+//; '"'"
alias esversion           'elasticversion $var_elasticHost' 
alias esget               '$CURL "$var_elasticHost/\!^"'
alias escurl              'esget \!^?pretty=true'
alias esgetp              'esget \!^?pretty=true'
alias esgetaliases        'esget _aliases?pretty=true'
alias elasticindexes      '$CURL "\!^/_cat/indices?v&s=index"'
alias esindexesv          'elasticindexes $var_elasticHost'
alias esindexes           'elasticindexes $var_elasticHost | $PERL -ne '"'"' chomp; if(/^\w+\s+\w+\s+\.\w+/){}else{print "$_\n"} '"'"
alias getindexes          esindexes
alias indexes             esindexes
alias indices             esindexes
alias esstats             'esgetp _stats'
alias esgetsettings       'esget \!^/_settings?pretty'
alias essettings          'esgetsettings $var_elasticIndex'
alias settings            esgetsettings
alias setting             'esget \!^/_settings?pretty'
alias esmappings          'esget $var_elasticIndex/_mappings?pretty'
alias mapping             'esget \!^/_mappings?pretty'
alias espolicy            'esget _ilm/policy/cm-policy-$var_elasticIndex?pretty'
alias estemplate          'esget _template/cm-template-$var_elasticIndex?pretty'
alias estemplateraw       'esget _template/cm-template-$var_elasticIndex'

alias esperl              '$PERL $CYG_HOME/aliases/tcsh/elastic.pl'
alias esperlhelp          'esperl -h'

alias estemplatemapping   '(echo cm-template-$var_elasticIndex && estemplateraw ) | esperl --template_mapping'
alias esindexproperties   'esget $var_elasticIndex.properties/_doc/_properties?pretty'
alias indexproperties     esindexproperties
alias esindexmetadata     'esget $var_elasticIndex.properties/_doc/_metadata?pretty'
alias metadata            'esindexmetadata | esperl --index_metadata'
alias esmetadata          metadata
alias essearchall         'esgetp _search'
alias essearch            'esgetp $var_elasticIndex/_search'
alias searchindex         'esgetp \!^/_search'
alias esdelete            '$CURL -X DELETE "$var_elasticHost/\!^"'
alias esrefresh           '$CURL -X POST "$var_elasticHost/_refresh?pretty=true"'
alias docid               '$CURL "$var_elasticHost/$var_elasticIndex/_search?q=_id:\!^&pretty=true"'
alias recid               '$CURL "$var_elasticHost/$var_elasticIndex/_search?q=Number:REC_\!^&pretty=true"'
alias metadatasrch        '$CURL "$var_elasticHost/$var_elasticIndex/_search?q=(\!^)&size=1000&pretty=true"'
alias metasearch          metadatasrch

alias recxx               'setenv ES_DOCID \!^; perl -e '"'"' \\
  $id=$ENV{ES_DOCID};                                         \\
  if($id =~ /^(rec_)?(\d{1,6})$/i){                           \\
    $id = $2;                                                 \\
    $zeroes = "0" x (9 - length($id));                        \\
    $id = "9$zeroes$id.1.1";                                  \\
  }                                                           \\
  elsif($id =~ /^\d{10}$/) {                                  \\
    $id .= ".1.1";                                            \\
  }                                                           \\
  open F,">C:/tmp/perl_env.txt" or die;                       \\
  print F "set ES_DOCID = \"$id\"\n";                         \\
  close F;                                                    \\
  '"'  ; unsetenv ES_DOCID "

alias contentsrecnum 'recxx \!^; source C:/tmp/perl_env.txt; contents $ES_DOCID;'

alias contents            'docid \!^     \\
| $PERL -ne '"'"'                        \\
if(/^\s+\"Content\"\s+:\s+\"(.+)\",$/){  \\
  @l=split /\\n/, $1;                    \\
  for(@l){                               \\
    s/\\"/"/g;                           \\
    print "$_\n";                        \\
  }                                      \\
}  '"'"

alias containers          'eshasfield_withsrc Container | esperl --container_records'
alias esdeldocid          '$CURL -XDELETE "$var_elasticHost/$var_elasticIndex/_doc/\!^"'
alias delxx               'setenv ES_DOCID \!^; perl -e '"'"' \\
  $id=$ENV{ES_DOCID};                                         \\
  if($id =~ /^(\d+)\.\d+\.\d+$/){                             \\
    $id .= "?routing=$1";                                     \\
  }                                                           \\
  open F,">C:/tmp/perl_env.txt" or die;                       \\
  print F "set ES_DOCID = \"$id\"\n";                         \\
  close F;                                                    \\
  '"'  ; unsetenv ES_DOCID "
alias deldoc              'delxx \!^; source C:/tmp/perl_env.txt; esdeldocid $ES_DOCID '
alias delid               'delxx \!^; source C:/tmp/perl_env.txt; esdeldocid $ES_DOCID '

alias pycurl		      '$PYTHON_CYG $PYTHON_HOME/curl.py'
alias pycurldef	          'pycurl -u "$var_elasticHost/$var_elasticIndex" -a "_search?pretty"'
alias pyc		          'pycurldef  -i -s; cat /c/tmp/pycurl_output.txt'
alias esquery             'pycurldef \!^' 
alias esqueryi            'pycurldef -i' 
alias esquerystring       'pycurldef -q'

alias escommand           'pycurldef -f $ELASTIC_QUERIES'
alias escommand_debug     'pycurldef -d -f $ELASTIC_QUERIES'
alias eshasfield          'escommand -c field_exists \!^ | \\
grep _id | sort | $PERL -ne  '"'"'                         \\
  s/^.+:\s*"([^"]+)".+$/$1/;                               \\
  chomp;                                                   \\
  print "$_\n";                                            \\
'"'"
alias eshasfield_withsrc  'escommand --source -c field_exists \!^' 
alias hasclassification   'eshasfield Classification' 
alias hascontainer        'eshasfield Container' 
alias hascontent          'eshasfield Document.Content' 
alias hascontenttrim      'eshasfield Document.Content | \\
$PERL -e '"'"'                                           \\
@i=<>;                                                   \\
for(@i) {                                                \\
  chomp;                                                 \\
  s/^(\d+)\..+$/$1/;                                     \\
  $u{$_}=1;                                              \\
}                                                        \\
                                                         \\
for(sort {$a<=>$b} keys %u){                             \\
  print "$_\n"                                           \\
}                                                        \\
'"'" 

alias withandwithout      'hascontenttrim  | esperl --records_with_and_without_content'
alias hasexternalref      'eshasfield ExternalReference' 
alias hasnotes            'eshasfield Notes' 
alias hasallcontacts      'eshasfield AllContacts'
alias allids              'escommand -c match_all | grep _id | sort'
alias esalldocs           allids
alias trimallids          ' allids \\
 | $PERL -e  '"'"'                 \\
                                   \\
@in = <>;                          \\
for(@in) {                         \\
  chomp;                           \\
  s/^\D+//;                        \\
  s/\D+$//;                        \\
  s/\.\d+\.\d+$//;                 \\
  $uniq{$_} = 1;                   \\
}                                  \\
for (sort keys %uniq){             \\
  print "$_\n";                    \\
}                                  \\
'"'"

alias esfield             '(echo \!^ && escommand --json -c get_field \!^) | esperl --get_field'
alias titles              'esgetfield Title | sort'
alias booktitlesv         'esgetfield Title | sort       \\
| $PERL -ne '"'"'                                        \\
/^(\d+)\s+"([^"]+)"/i and do {             \\
  if ($1 >= 9000000500) {                                \\
    ($u,$t) = ($1,$2);                                   \\
    $a = $t;                                             \\
    $a =~ s/[^A-z ]//g;                                  \\
    $a =~ s/(\w)\w+/$1/g;                                \\
    $a =~ s/ //g;                                        \\
    $a =~ s/^(...).+$/$1/g;                              \\
    $a = uc $a;                                          \\
    print "$u\t$a\t$t\n";                                \\
  }                                                      \\
}                                                        \\
'"'"

alias booktitles          'booktitlesv                          \\
 | $PERL -e '"'"'                                               \\
  @in = <>;                                                     \\
  my $acr;                                                      \\
  for(@in) {                                                    \\
    chomp;                                                      \\
    if(/^(\d+)\s+(\w+)/) {                                      \\
      ($u,$a) = ($1,$2);                                        \\
      push @col1, "$u\t$a\t";                                   \\
      $acr{$a} = $u;                                            \\
    }                                                           \\
  }                                                             \\
  print "\nOrder by URI\t\t|\tOrder by Acronym\n";              \\
  print "--------------------------------------------------\n"; \\
  @acrons = sort keys %acr;                                     \\
  for($i=0; $i <= $#col1; $i++) {                               \\
    $ac = $acrons[$i];                                          \\
    print $col1[$i]."|\t".$ac."\t".$acr{$ac}."\n";              \\
  }                                                             \\
'"'"

alias capture_input    '$PERL -e '"'"'                            \\
@in=<>;                                                           \\
open T, ">C:/temp/xxx.txt" or die "Couldnt open /c/temp/xxx.txt"; \\
for(@in){                                                         \\
  print T $_;                                                     \\
} '"'" 

alias docid2acronym         'capture_input && booktitlesv > /c/temp/booktitles.txt; esperl --book_id_2_acronym'
alias getacronyms           docid2acronym
alias toacronyms            docid2acronym

alias bookdates           '(booktitlesv && esgetfield DateCreated) | esperl --book_dates'

alias doccontent          'escommand -c get_record_content \!^ \\
 | $PERL -ne '"'"'            \\
if(/\\n/) {                   \\
  @m = split /\\n/;           \\
  for(@m) {                   \\
    s/\\"/"/g;                \\
    print "$_\n";             \\
  }                           \\
}                             \\
else { print }                \\
'"'"

alias content             doccontent
alias getcontent          doccontent

alias contentsrch         '$CURL "$var_elasticHost/$var_elasticIndex/_search?q=(Document.Content:\!^)&size=1000&pretty=true" \\
 | $PERL -ne '"'"'            \\
if(/\\n/) {                   \\
  @m = split /\\n/;           \\
  for(@m) {                   \\
    s/\\"/"/g;                \\
    print "$_\n";             \\
  }                           \\
}                             \\
else { print }                \\
'"'"


alias contentsrchids          '$CURL "$var_elasticHost/$var_elasticIndex/_search?q=(Document.Content:\!^)&size=1000&_source=false&pretty=true" \\
| $PERL -ne '"'"'                          \\
chomp;                                     \\
/"_id"\s*:\s*"([\d\.]+)/ and do            \\
{ print "$1\n"; }                          \\
'"' | sort " 

alias searchcontents      contentids

alias phrasesrchids      'escommand --size 1000 -c search_content_phrase \!^ \\
 | $PERL -ne '"'"'                         \\
chomp;                                     \\
/"_id"\s*:\s*"([\d\.]+)/ and do            \\
{ print "$1\n"; }                          \\
'"' | sort "

alias phrasesrch         'escommand --source --size 1000 -c search_content_phrase \!^ \\
| $PERL -ne '"'"'          \\
if(/\\n/) {                \\
  @m = split /\\n/;        \\
  for(@m) { print "$_\n"; }\\
}                          \\
else { print }             \\
'"'"

alias trimcontent         'escommand --source --size 1000 -c search_record_content \!^'
alias trimcontentid       'escommand --size 1000 -c search_record_content \!^ \\
| grep _id | $PERL -ne '"'"' s/\D//g; print "$_\n"; '"'"
alias trimcontentidsorted 'escommand --size 1000 -c search_record_content \!^ \\
| grep _id | sort | $PERL -ne '"'"' s/\D//g; print "$_\n"; '"'"

alias trimphrase          'escommand --source --size 1000 -c search_record_content_phrase \!^'
alias trimphraseids       'escommand --size 1000 -c search_record_content_phrase \!^ \\
| grep _id | $PERL -ne '"'"' s/\D//g; print "$_\n"; '"'"

alias not_trimcontent     'escommand --source --size 1000 -c not_search_record_content \!^'
alias not_trimcontentid   'escommand --size 1000 -c not_search_record_content \!^ \\
| grep _id | $PERL -ne '"'"' s/\D//g; print "$_\n"; '"'"

alias not_trimphrase     'escommand --source --size 1000 -c not_search_record_content_phrase \!^'
alias not_trimphraseids  'escommand --size 1000 -c not_search_record_content_phrase \!^ \\
| grep _id | $PERL -ne '"'"' s/\D//g; print "$_\n"; '"'"

alias esrectypes          'eshasfield_withsrc RecordType | egrep "_id|RecordType" \\
| $PERL -e '"'"'                            \\
@in = <>;                                   \\
while(my $l = shift @in) {                  \\
  chomp $l;                                 \\
  if($l =~ /"_id":\s+"(\d+)/) {             \\
    $uri = $1;                              \\
    $l = shift @in;                         \\
    chomp $l;                               \\
    if($l =~ /RecordType":\s+(\d+)/) {      \\
      $rectypes{$uri} = $1;                 \\
    }                                       \\
  }                                         \\
}                                           \\
for (sort {$a<=>$b} keys %rectypes) {       \\
  print "$_ => RecordType $rectypes{$_}\n"; \\
}                                           \\
'"'"


# Delete a document/record and its children
alias esdelparentchild    'escommand -c delete_children \!^ && esdeldocid \!^'

alias elasticinfo         'echo "HOST    : $var_elasticHost"; echo "INDEX   : $var_elasticIndex"; esversion; echo; indexes'  
alias esinfo              elasticinfo
alias esenv               'echo "HOST    : $var_elasticHost"; echo "INDEX   : $var_elasticIndex"'
alias curlh               '$CURL "$var_elasticHost/\!^"'

alias curl5               '$CURL "$ELASTIC_HOST5/\!^"'
alias curldel5            '$CURL -X DELETE "$ELASTIC_HOST5/\!^"'  
alias eshost5             'elastichost $ELASTIC_HOST5'
alias esinfo5             'echo "HOST    : $ELASTIC_HOST5"; elasticversion $ELASTIC_HOST5; elasticindexes $ELASTIC_HOST5' 

alias curl6               '$CURL "$ELASTIC_HOST6/\!^"'
alias curldel6            '$CURL -X DELETE "$ELASTIC_HOST6/\!^"'  
alias eshost6             'elastichost $ELASTIC_HOST6'
alias esinfo6             'echo "HOST    : $ELASTIC_HOST6"; elasticversion $ELASTIC_HOST6; elasticindexes $ELASTIC_HOST6' 

alias curl7               '$CURL "$ELASTIC_HOST7/\!^"'
alias curldel7            '$CURL -X DELETE "$ELASTIC_HOST7/\!^"'  
alias eshost7             'elastichost $ELASTIC_HOST7'
alias esinfo7             'echo "HOST    : $ELASTIC_HOST7"; elasticversion $ELASTIC_HOST7; elasticindexes $ELASTIC_HOST7' 

alias espy                '$PYTHON $PYTHON_HOME/elasticClient.py --config $PYTHON_HOME/elastic.config --server $var_elasticHost'
alias espya               'espy "\!^/all"'
alias espym               'espy "\!^/mapping"'
alias espys               'espy "\!^/settings"'

alias acmapping           'espy $var_elasticIndexAC/m'
alias acsettings          'espy $var_elasticIndexAC/s'
alias autoclasstypes      'espy search/$var_elasticIndexAC -s type --compact --size 10000 | grep type | sort | uniq'
alias estype              'espy search/$var_elasticIndexAC/q:type:\!^'

alias aclabels  'espy search/$var_elasticIndexAC/q:type:word_label_counts -e word_count:type --compact --size 10000 \\
| $PERL -e '"'"'                                                   \\
while(<>){                                                         \\
  chomp;                                                           \\
  if(/^_id:(wlc_(\d+)) = \{\s*$/) { $id = $2; $ID{$id} = $1." "; } \\
  elsif(/^\s+"word_count"/) {}                                     \\
  elsif(/^\s+"(count|label|name)"/) { $ID{$id} .= $_; }            \\
  elsif(/^\}/){ $ID{$id} .= "\n"; $id = ""; }                      \\
  else { }                                                         \\
}                                                                  \\
for(sort {$a<=>$b} keys %ID){ print $ID{$_}; }                     \\
exit;                                                              \\
'"'"

alias autoclassinfo  "echo '\nAutoClassification TYPES: \n'; autoclasstypes; echo '\n-------\n' ; aclabels; echo '\n--------\n' "
alias acinfo autoclassinfo

alias elastic_add_wlc_prefix 'set wlcIndex=`echo \!^ | sed -r -e "s/^([[:digit:]])/wlc_\1/"`'

# Provide the _id for the "word_label_counts" entry and format the words into columns
# Takes additional arguments as follows
#  ARG1  - search string which will be matched against each pair
#        Eg. "^un" will only match words beginning with 'un'
#  ARG2  - number of columns (default 10)
#  ARG3  - size of columns (default 30)
#
alias getwords 'setenv AC_SEARCH_STR "\!*"                           \\
&& elastic_add_wlc_prefix \!:1                                       \\
&& espy search/$var_elasticIndexAC/$wlcIndex --compact -s word_count \\
| esperl  --autoclass_getwords '

alias esprocesslog  'cat \!^ | esperl --es_process_log'
alias esgetfiles 'cat \!^ | $PERL -e '"'"'                 \\
while(<>) {                                                \\
  chomp $_;                                                \\
  if (/^([\d:]+)\s+[A-z0-9]{2}\s+(\d+\s+){6}([^\s]+)/) {   \\
     if(not exists $files{$3}) {                           \\
       $files{$3} = 1;                                     \\
       $bytime{$1} = $3                                    \\
     }                                                     \\
  }                                                        \\
}                                                          \\
for(sort keys %bytime){                                    \\
  print "$_\t$bytime{$_}\n";                               \\
}                                                          \\
'"'"

#
#=====================================================================================================================================================
#
#            SVN aliases for trim_svn index
#

alias eshelpsvn      'echo                                                                      \\
"                                                                                               \\
  For most of the aliases below, appending a \042v\042 to the alias name will produce verbose output \\
                                                                                                \\
  essvn <command> [args]  Run an elastic command with optional arguments                        \\
  essvnfile \042file\042        Search for all revisions that modified \042file\042             \\
  essvnparent \042file\042        Search for revisions based on the parent folder               \\
  essvnauth               Provide a name to search on. Will add wildcard to the search and      \\
                          return the last 100 revisions                                         \\
  essvnauthall            As above, but will return upto 10,000 revisions                       \\
  authtoday/authweek      As above, but will show revisions for last day/week                   \\
  authdays                Takes integer argument to show that many days since today             \\
  today/yesterday         Takes no args and returns revisions modified today/yesterday          \\
  lastweek                Takes no args and returns revisions modified in the last week         \\
  days                    Takes an integer argument and returns that many days since today      \\
                                                                                                \\
                                                                                                \\
\n\n"                                                                                           \\
'

alias essvnupdate         '$PERL $PERL_HOME/svnLogProcessor/svnlog_to_elastic.pl -update -svn $SVN_LAB_FILE --elastic $ELASTIC_SVN_HOST -work E:/tmp'
alias pycurlsvn	          'pycurl -u "$var_elasticHostSvn/$var_elasticIndexSvn" -a "_search?pretty"'
alias essvn               'pycurlsvn -f $ELASTIC_SVN_QUERIES'
alias essvn_debug         'pycurlsvn -d -f $ELASTIC_SVN_QUERIES'
alias essvnfile           'essvn --json --size 10000 -c search_by_file \!^ | lookForSvnFile '
alias essvnfilev           'setenv ESSVNFILE verbose; essvn --json --size 10000 -c search_by_file \!^ | lookForSvnFile ; unsetenv ESSVNFILE'

alias lookForSvnFile      'esperl --svn_look_for_file'
alias essvnparent         'essvn --json --size 10000 -c search_by_parent \!^ | lookForSvnParent '
alias essvnparentv        'setenv ESSVNFILE verbose; essvn --json --size 10000 -c search_by_parent \!^ | lookForSvnParent ; unsetenv ESSVNFILE'
alias essvnparentexact    'essvn --json --size 10000 -c search_by_parent_exact \!^ | lookForSvnParent '

alias lookForSvnParent        'esperl --svn_look_for_parent'
alias essvnauthor             'essvn --json --size \!:1 -c search_by_author \!:2\* | lookForSvnAuthor '
alias essvnauth               'essvnauthor 100 \!^'
alias essvnauthv              'setenv ESSVNFILE verbose; essvnauthor 100 \!^; unsetenv ESSVNFILE'
alias essvnauthall            'essvnauthor 10000 \!^'
alias essvnauthallv           'setenv ESSVNFILE verbose; essvnauthor 10000 \!^; unsetenv ESSVNFILE'

alias essvnauthorbydate       'essvn --json --size 10000 -c search_by_author_and_date \!:1\* \!:2 \!:3 | lookForSvnAuthor '
alias essvnauthdays           'essvnauthorbydate \!:1 now-\!:2d/d now'
alias essvnauthdaysv          'setenv ESSVNFILE verbose; essvnauthorbydate \!:1 now-\!:2d/d now; unsetenv ESSVNFILE'
alias authdays                'essvnauthdays \!:1 \!:2'
alias authdaysv               'essvnauthdaysv \!:1 \!:2'
alias authtoday               'essvnauthdays \!^ 1'
alias authtodayv              'essvnauthdaysv \!^ 1'
alias authweek                'essvnauthdays \!^ 7'
alias authweekv               'essvnauthdaysv \!^ 7'

alias essvnbydate             'essvn --json --size 10000 -c search_by_date \!:1 \!:2 | lookForSvnAuthor '
alias essvnbydatetoday        'essvnbydate now-1d/d now'
alias essvnbydatetodayv       'setenv ESSVNFILE verbose; essvnbydate now-1d/d now; unsetenv ESSVNFILE'
alias today                   essvnbydatetoday
alias todayv                  essvnbydatetodayv
alias essvnbydateyesterday    'essvnbydate now-2d now-1d'
alias essvnbydateyesterdayv   'setenv ESSVNFILE verbose; essvnbydate now-2d now-1d; unsetenv ESSVNFILE'
alias yesterday               essvnbydateyesterday
alias yesterdayv              essvnbydateyesterdayv
alias days                    'essvnbydate now-\!^d/d now'
alias daysv                   'setenv ESSVNFILE verbose; essvnbydate now-\!^d/d now; unsetenv ESSVNFILE'
alias lastweek                'essvnbydate now-7d/d now'
alias lookForSvnAuthor        'esperl --svn_look_for_author'





