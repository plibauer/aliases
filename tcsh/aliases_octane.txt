##################################################################################################################
#                                                                                                                #
#     Octane/ALM specific aliases                                                                                #
#     This file should only be read once.                                                                        #
#                                                                                                                #
##################################################################################################################

alias eshelpoctane      'echo                                                             \\
"                                                                                         \\
                                                                                          \\
---    ALM database    ---                                                                \\
  almcr               : Search the ALM database using a legacy ALM id                     \\
  almmatch <text>     : Search defect titles matching <text>                              \\
  almmatchv <text>    : Search defect titles, description and comments for <text>         \\
                                                                                          \\
---    Octane Index    ---                                                                \\
  octanecreate        : Generate the JSON mappings/settings for creating octane_new index \\
  octaneinitialise    : Sync all defects from http://10.11.12.2:9273                      \\
  octaneupdate        : Sync last 2 weeks of defects from http://10.11.12.2:9273          \\
  octaneupdatemore    : Sync last month of defects from http://10.11.12.2:9273            \\
  octanenew           : Show the 10 most recent defects for the local index               \\
  octanenewx <x>      : Show the x most recent defects for the local index                \\
                                                                                          \\
  defect <id>         : Search for a defect with ID <id>                                  \\
  defectv <id>        : Verbose form of above                                             \\
  crmatch <text>      : Search defect titles for <text>                                   \\
  crlegacy <id>       : Do a wildcard search of the legacy <id> (equiv. to <*id>)         \\
"                                                                                         \\
'

alias alm               '$PERL $ALM_DB/ALMTool.pl'
alias almcr             'alm --cr'
alias almmatch          'alm --match \!^ | pgrep summary'
alias almmatchv         'alm --match'
alias almsummary        'alm --summary --cr'
alias almschema         'alm --schema'

#--------------------------------------------
# SQLITE

set SQLITE_ALM = $ALM_DB/database/ALM.db
alias almsqlite         'sqlite3.exe $SQLITE_ALM'
alias crmatch           almsqlite \"SELECT id,message FROM messages WHERE message MATCH \'\!^\' AND type = \'0\' ORDER BY CAST\(id AS INTEGER\)\"
alias crmatchdesc       almsqlite \"SELECT id,message FROM messages WHERE message MATCH \'\!^\' AND type = \'1\' ORDER BY CAST\(id AS INTEGER\)\"
alias almsqlitedb       cygstart cmd.exe /c sqlite3.exe $SQLITE_ALM

#---------------------------------------------

alias curldefect           'curl -s "$var_elasticHostOctane/octane_new/_search?pretty&q=\!^"'
alias defectraw            curldefect
alias defect               '$PYTHON $PYTHON_HOME/octane.py'
alias defectv              '$PYTHON $PYTHON_HOME/octane.py -v'
alias cr                   defect
alias crv                  defectv
alias pycurloct            'pycurl -u "$var_elasticHostOctane/octane_new" -a "_search?pretty" -f $ELASTIC_QUERIES'
alias currentdefects       'pycurloct -c current_defects \!^'
alias defectbyrelease      'pycurloct -c defects_by_release \!:1 \!:2'
alias alldefects           'pycurloct -c all_defects \!^'
alias octanesearchtitle    'pycurloct -c search_defect_by_title \!^' 
alias octane               elastichost $var_elasticHostOctane
alias syncoctane           'pycurl -u "$var_elasticHostOctane" -c reindex_octane -f $ELASTIC_QUERIES now-7d'
alias syncoctanemonth      'pycurl -u "$var_elasticHostOctane" -c reindex_octane -f $ELASTIC_QUERIES now-1M'
alias syncoctaneyear       'pycurl -u "$var_elasticHostOctane" -c reindex_octane -f $ELASTIC_QUERIES now-1y'
alias syncoctaneall        'pycurl -u "$var_elasticHostOctane" -c reindex_octane -f $ELASTIC_QUERIES now-10y'
alias octanesync           'syncoctane && esrefresh && esinfo'

alias octanecreate         '$PYTHON $PYTHON_HOME/octane.py -e octane_new'
alias octaneinitialise     'pycurl -u "$var_elasticHostOctane" -c update_octane -f $ELASTIC_QUERIES http://10.11.12.2:9273 octane_new now-20y octane_new'
alias octaneupdate         'pycurl -u "$var_elasticHostOctane" -c update_octane -f $ELASTIC_QUERIES http://10.11.12.2:9273 octane_new now-2w octane_new'
alias octaneupdatemore     'pycurl -u "$var_elasticHostOctane" -c update_octane -f $ELASTIC_QUERIES http://10.11.12.2:9273 octane_new now-1M octane_new'
alias octanelatest         'pycurl -u "$var_elasticHostOctane/octane_new" -c octane_show_latest --json -f $ELASTIC_QUERIES --size \!^ | perl -e '"'"' \\
use strict;                                                      \\
use 5.032;                                                       \\
use JSON;                                                        \\
use utf8;                                                        \\
use Term::ANSIColor qw(:constants :constants256 colored);        \\
                                                                 \\
my $in = join "", <>;                                            \\
utf8::encode($in);                                               \\
binmode *STDOUT, ":encoding(UTF-8)";                             \\
my $j = JSON->new->allow_nonref;                                 \\
my $parsed = $j->decode($in);                                    \\
my $count = $parsed->{hits}{total}{value};                       \\
my $hits = $parsed->{hits}{hits};                                \\
if($count > 0){                                                  \\
  say "[Hits $count]";                                           \\
  for my $hit (@$hits) {                                         \\
     my $id = $hit->{_id};                                       \\
	 $id =~ s/^oct(im|cr|cl)6j//i;                                 \\
     my $src = $hit->{_source};                                  \\
     my ($name,$date) = ($src->{name}, $src->{last_modified});   \\
     $date =~ s/^([\d-]+)T([\d:]+).+$/$1 $2/;                    \\
 	 print "$date  ",YELLOW,"$id: ", CYAN, "$name\n", RESET;       \\
  }                                                              \\
}                                                                \\
'"'"

alias octanenew			   'octanelatest 10'
alias octanenewx		   'octanelatest \!^'

alias octanesearchlegacyid 'pycurloct --json -c search_defect_by_legacy_id '
alias crlegacy             'octanesearchlegacyid \!^ | legacyprocessor '

alias octaneperl           '$PERL C:/cygwin/home/plibauer/aliases/tcsh/octane.pl'
alias legacyprocessor      'octaneperl --legacy_id'

set DEFECT_FIELDS='_id|_phase|_severity|_release|name|_priority|_defect_type|_qa_owner|_owner'
alias defectsuser   		'currentdefects \!^ | egrep "$DEFECT_FIELDS" | defectprocessor '
alias defects       		'defectsuser paul.libauer'
alias defectsuserv  		'currentdefects \!^ | egrep "$DEFECT_FIELDS" | defectprocessorv'
alias defectsv      		'defectsuserv paul.libauer'
alias def94p1	    		'defectbyrelease paul.libauer "9.40 Patch 1" | egrep "$DEFECT_FIELDS" | defectprocessor '
alias def10		    		'defectbyrelease paul.libauer "10.0" | egrep "$DEFECT_FIELDS" | defectprocessor '
alias defectsall    		'alldefects paul.libauer | egrep "$DEFECT_FIELDS" | defectprocessor '
alias crmatch       		'octanesearchtitle \!^ | egrep "$DEFECT_FIELDS" | defectprocessor '

alias defectprocessor 		'octaneperl --defects'
alias defectprocessorv 		'octaneperl --defects --verbose'


