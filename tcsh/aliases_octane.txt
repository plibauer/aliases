##################################################################################################################
#                                                                                                                #
#     Octane/ALM specific aliases                                                                                #
#     This file should only be read once.                                                                        #
#                                                                                                                #
##################################################################################################################

alias alm               '$PERL $ALM_DB/ALMTool.pl'
alias almcr             'alm --cr'
alias almmatch          'alm --match \!^ | pgrep summary'
alias almmatchv         'alm --match'
alias almsummary        'alm --summary --cr'
alias almschema         'alm --schema'


alias curldefect        'curl -s "$var_elasticHost/octane_new/_search?pretty&q=\!^"'
alias defectraw         curldefect
alias defect            '$PYTHON $PYTHON_HOME/octane.py'
alias defectv           '$PYTHON $PYTHON_HOME/octane.py -v'
alias cr                defect
alias crv				defectv
alias pythoncurl        '$PYTHON_CYG $PYTHON_HOME/curl.py "$var_elasticHost/octane_new/_search?pretty" -f $ELASTIC_QUERIES'
alias currentdefects    'pythoncurl -c current_defects \!^'
alias defectbyrelease   'pythoncurl -c defects_by_release \!:1 \!:2'
alias alldefects        'pythoncurl -c all_defects \!^'
alias syncoctane        '$PYTHON_CYG $PYTHON_HOME/curl.py "$var_elasticHost/_reindex" -c reindex_octane -f $ELASTIC_QUERIES'


alias defectprocessor   '$PERL -e ' "'" ' \\
use Term::ANSIColor qw(:constants :constants256);                     \\
sub parse {                                                           \\
  my $l = shift;                                                      \\
  chomp $l;                                                           \\
  $l =~ s/^\s+\"(\w+)\"\s+:\s+//;                                     \\
  my $field = $1;                                                     \\
  $l =~ s/^"//;                                                       \\
  $l =~ s/"?,*\s*$//;                                                 \\
  return ($field,$l);                                                 \\
}                                                                     \\
@IN = <>;                                                             \\
my $VERBOSE = 0;                                                      \\
if($ENV{DEFECT_OUTPUT} eq "verbose"){ $VERBOSE = 1;}                  \\
#print "RELEASE: ID [phase,severity,priority,defect_type] Summary\n"; \\
my (%ids,%releases);                                                  \\
while(my $l = shift @IN) {                                            \\
  if($l =~ /"_id.+:\s+"(\w+)"/) {                                     \\
    my $id = $1;                                                      \\
    my ($ph,$lm,$sev,$rel,$name,$pr,$det,$typ,$cl,$qa);               \\
    while ($l = shift @IN) {                                          \\
      if( $l =~ /^\s+"_id"/ ) {                                       \\
         unshift @IN, $l;                                             \\
         last;                                                        \\
      }                                                               \\
      my ($f,$val) = parse($l);                                       \\
      #print "F:$f, VAL:$val\n";                                      \\
      $f =~ /^(_qa_owner)$/ and do {                                  \\
         $qa = $val;                                                  \\
      };                                                              \\
      $f =~ /^(closed_on)$/ and do {                                  \\
         $cl = $val;                                                  \\
      };                                                              \\
      $f =~ /^(name)$/ and do {                                       \\
         $name = $val;                                                \\
      };                                                              \\
      $f =~ /^(_release)$/ and do {                                   \\
         $rel = $val;                                                 \\
      };                                                              \\
      $f =~ /^(_defect_type)$/ and do {                               \\
         $typ = $val;                                                 \\
      };                                                              \\
      $f =~ /^(_phase)$/ and do {                                     \\
         $ph = $val;                                                  \\
      };                                                              \\
      $f =~ /^(last_modified)$/ and do {                              \\
         $lm = $val;                                                  \\
      };                                                              \\
      $f =~ /^(_detected_in_release)$/ and do {                       \\
         $det = $val;                                                 \\
      };                                                              \\
      $f =~ /^(_severity)$/ and do {                                  \\
         $sev = $val;                                                 \\
      };                                                              \\
      $f =~ /^(_priority)$/ and do {                                  \\
         $pr = $val;                                                  \\
      };                                                              \\
    }                                                                 \\
                                                                      \\
    $rel =~ s/^9.50.+$/10.00/;                                        \\
    $rel =~ s/^(\d+)\.(\d)\s/$1.$+0 /;                                \\
    $rel =~ s/^(\d+)\.(\d)$/$1.$+0/;                                  \\
    # Remove any escaped double quotes from the title                 \\
    $name =~ s/\\"/"/g;                                               \\
    #print "ID:$id\nPH:$ph\nSEV:$sev\nREL:$rel\nNAM:$name\nPR:$pr\nDET:$det\nTYP:$typ\n\n"; \\
    $ids{$id} = { id          => $id,                                 \\
                  phase       => $ph,                                 \\
                  severity    => $sev,                                \\
                  release     => $rel,                                \\
                  name        => $name,                               \\
                  priority    => $pr,                                 \\
                  detected_in => $det,                                \\
                  type        => $typ };                              \\
    push @{$releases{$rel}}, $id;                                     \\
  }                                                                   \\
}                                                                     \\
my $SPACE = length("[Awaiting Decision,Critical,Very High,Enhancement]"); \\
for(sort keys %releases) {                                            \\
  my $rel = $_;                                                       \\
  s/^.+"([\s\w\d\.]+)".*$/$1/;                                        \\
  print BOLD, YELLOW, "\nTarget Release:$_\n", RESET;                 \\
  my %defects;                                                        \\
  foreach(@{$releases{$rel}}) {                                       \\
    my $id = $_;                                                      \\
    my $lead = "[".$ids{$id}{phase}.                                  \\
               ",".$ids{$id}{severity}.                               \\
               ",".$ids{$id}{priority}.                               \\
               ",".$ids{$id}{type}."] ";                              \\
    my $sp = " "x($SPACE - length($lead));                            \\
    my $summary = $ids{$id}{name};                                    \\
    my $shortSum = substr $summary, 0, 80;                            \\
    if($VERBOSE) {                                                    \\
      if(length($summary) > 80) {                                     \\
        $defects{$id} = $lead.$sp.$shortSum." ...";                   \\
      }                                                               \\
      else { $defects{$id} = $lead.$sp.$summary;  }                   \\
    }                                                                 \\
    else {                                                            \\
      $defects{$id} = $summary;                                       \\
    }                                                                 \\
  }                                                                   \\
  foreach(reverse sort keys %defects) {                               \\
    print BOLD, CYAN, "  $_: ", RESET,$defects{$_}."\n";              \\
  }                                                                   \\
}                                                                     \\
' "'"

alias defectsuser   'currentdefects \!^ | egrep "_id|_phase|_severity|_release|name|_priority|_defect_type" | defectprocessor '
alias defects       'defectsuser paul.libauer'
alias defectsuserv  'setenv DEFECT_OUTPUT "verbose"; currentdefects \!^ | egrep "_id|_phase|_severity|_release|_name|_priority|_defect_type" | defectprocessor ; unsetenv DEFECT_OUTPUT'
alias defectsv      'defectsuserv paul.libauer'


alias def94p1		'defectbyrelease paul.libauer "9.40 Patch 1" | egrep "_id|_phase|_severity|_release|name|_priority|_defect_type" | defectprocessor '
alias def10			'defectbyrelease paul.libauer "10.0" | egrep "_id|_phase|_severity|_release|name|_priority|_defect_type" | defectprocessor '

alias defectsall    'alldefects paul.libauer | egrep "_id|_phase|_severity|_release|name|_priority|_defect_type" | defectprocessor '
