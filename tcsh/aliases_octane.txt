##################################################################################################################
#                                                                                                                #
#     Octane/ALM specific aliases                                                                                #
#     This file should only be read once.                                                                        #
#                                                                                                                #
##################################################################################################################

alias alm               '$PERL $ALM_DB/ALMTool.pl'
alias almcr             'alm --cr'
alias almmatch          'alm --match \!^ | pgrep summary'
alias almmatchv         'alm --match'
alias almsummary        'alm --summary --cr'
alias almschema         'alm --schema'

#--------------------------------------------
# SQLITE

set SQLITE_ALM = $ALM_DB/database/ALM.db
alias almsqlite         'sqlite3.exe $SQLITE_ALM'
alias crmatch           almsqlite \"SELECT id,message FROM messages WHERE message MATCH \'\!^\' AND type = \'0\' ORDER BY CAST\(id AS INTEGER\)\"
alias crmatchdesc       almsqlite \"SELECT id,message FROM messages WHERE message MATCH \'\!^\' AND type = \'1\' ORDER BY CAST\(id AS INTEGER\)\"
alias almsqlitedb       cygstart cmd.exe /c sqlite3.exe $SQLITE_ALM

#---------------------------------------------



alias curldefect           'curl -s "$var_elasticHostOctane/octane_new/_search?pretty&q=\!^"'
alias defectraw            curldefect
alias defect               '$PYTHON $PYTHON_HOME/octane.py'
alias defectv              '$PYTHON $PYTHON_HOME/octane.py -v'
alias cr                   defect
alias crv				   defectv
alias pycurloct        	   'pycurl -u "$var_elasticHostOctane/octane_new" -a "_search?pretty" -f $ELASTIC_QUERIES'
alias currentdefects       'pycurloct -c current_defects \!^'
alias defectbyrelease      'pycurloct -c defects_by_release \!:1 \!:2'
alias alldefects           'pycurloct -c all_defects \!^'
alias octanesearchtitle    'pycurloct -c search_defect_by_title \!^' 
alias eshostoctane         elastichost $var_elasticHostOctane
alias syncoctane           'pycurl -u "$var_elasticHostOctane" -c reindex_octane -f $ELASTIC_QUERIES'
alias octanesync           'syncoctane && esrefresh && esinfo'

alias octanesearchlegacyid 'pycurloct --json -c search_defect_by_legacy_id '
alias crlegacy             'octanesearchlegacyid \!^ | legacyprocessor '
alias legacyprocessor      '$PERL -e '"'"'                                       \\
use JSON;                                                                        \\
use Data::Dumper;                                                                \\
use Term::ANSIColor qw(:constants :constants256);                                \\
my @out = <>;                                                                    \\
my $jsonStr;                                                                     \\
for(@out){                                                                       \\
  chomp;                                                                         \\
  $jsonStr .= $_;                                                                \\
}                                                                                \\
#print "JSON:\n$jsonStr\n\n";                                                    \\
my $json = decode_json($jsonStr);                                                \\
#print Dumper($json);                                                            \\
                                                                                 \\
if($json->{hits}{total}{value} > 0) {                                            \\
  print BOLD CYAN, "DEFECT ID     ", YELLOW, "LEGACY ID   ", RESET, "TITLE\n";   \\
  print BOLD CYAN, "------------- ", YELLOW, "----------- ", RESET, "-----\n";   \\
  for my $hit (@{$json->{hits}{hits}}) {                                         \\
     my $id = $hit->{_id};                                                       \\
     my $lid = $hit->{_source}{legacy_id_udf};                                   \\
     my $title = $hit->{_source}{name};                                          \\
     print BOLD CYAN, "$id ", YELLOW, "$lid ", RESET, "$title\n";                \\
  }                                                                              \\
}                                                                                \\
else { print RED, "NO MATCHES FOUND\n", RESET; }                                 \\
                                                                                 \\
'"'"


alias defectsuser       'currentdefects \!^ | egrep "_id|_phase|_severity|_release|name|_priority|_defect_type" | defectprocessor '
alias defects           'defectsuser paul.libauer'
alias defectsuserv      'setenv DEFECT_OUTPUT "verbose"; currentdefects \!^ | egrep "_id|_phase|_severity|_release|_name|_priority|_defect_type" | defectprocessor ; unsetenv DEFECT_OUTPUT'
alias defectsv          'defectsuserv paul.libauer'
alias def94p1	        'defectbyrelease paul.libauer "9.40 Patch 1" | egrep "_id|_phase|_severity|_release|name|_priority|_defect_type" | defectprocessor '
alias def10		        'defectbyrelease paul.libauer "10.0" | egrep "_id|_phase|_severity|_release|name|_priority|_defect_type" | defectprocessor '
alias defectsall        'alldefects paul.libauer | egrep "_id|_phase|_severity|_release|name|_priority|_defect_type" | defectprocessor '

set DEFECT_FIELDS='_id|_phase|_severity|_release|name|_priority|_defect_type'
alias crmatch           'octanesearchtitle \!^ | egrep "$DEFECT_FIELDS" | defectprocessor '

#  *** MODIFY THE CODE ***  below to use the Perl JSON module
#  (See the  'legacyprocessor' code above )

alias defectprocessor   '$PERL -e ' "'" '                             \\
use Term::ANSIColor qw(:constants :constants256);                     \\
sub parse {                                                           \\
  my $l = shift;                                                      \\
  chomp $l;                                                           \\
  $l =~ s/^\s+\"(\w+)\"\s*:\s+//;                                     \\
  my $field = $1;                                                     \\
  $l =~ s/^"//;                                                       \\
  $l =~ s/"?,*\s*$//;                                                 \\
  return ($field,$l);                                                 \\
}                                                                     \\
                                                                      \\
sub sort_by_release {                                                 \\
    # For releases like 'BACKLOG', sort last                          \\
    if( $a !~ /^\d+/ ) { return -1; }                                 \\
    if( $b !~ /^\d+/ ) { return 1; }                                  \\
	my ($RELA, $RELB, $amaj,$amin,$apatch, $bmaj, $bmin, $bpatch);    \\
    if ( $a =~ /^(\d+)\.(\d+)\s*(?:patch)*\s*(\d+)*$/i ) {            \\
		($amaj,$amin,$apatch) = ($1,$2,$3);                           \\
		$amin =~ s/^(\d)$/0$1/;                                       \\
		if($apatch){ $apatch =~ s/^(\d)$/0$1/; }                      \\
		else { $apatch = "00"; }                                      \\
		$RELA = $amaj.$amin.$apatch;                                  \\
		#print "  RELA = $RELA\n";                                    \\
    }                                                                 \\
    else { return -1; }                                               \\
    if ( $b =~ /^(\d+)\.(\d+)\s*(?:patch)*\s*(\d+)*$/i ) {            \\
		($bmaj,$bmin,$bpatch) = ($1,$2,$3);                           \\
		$bmin =~ s/^(\d)$/0$1/;                                       \\
		if($bpatch){ $bpatch =~ s/^(\d)$/0$1/; }                      \\
		else { $bpatch = "00"; }                                      \\
		$RELB = $bmaj.$bmin.$bpatch;                                  \\
		#print "  RELB = $RELB\n";                                    \\
    }                                                                 \\
    else { return 1; }                                                \\
    return $RELA <=> $RELB;                                           \\
}                                                                     \\
                                                                      \\
@IN = <>;                                                             \\
my $VERBOSE = 0;                                                      \\
if($ENV{DEFECT_OUTPUT} eq "verbose"){ $VERBOSE = 1;}                  \\
#print "RELEASE: ID [phase,severity,priority,defect_type] Summary\n"; \\
my (%ids,%releases);                                                  \\
while(my $l = shift @IN) {                                            \\
  if($l =~ /"_id.+:\s+"(\w+)"/) {                                     \\
    my $id = $1;                                                      \\
    my ($ph,$lm,$sev,$rel,$name,$pr,$det,$typ,$cl,$qa);               \\
    while ($l = shift @IN) {                                          \\
      if( $l =~ /^\s+"_id"/ ) {                                       \\
         unshift @IN, $l;                                             \\
         last;                                                        \\
      }                                                               \\
      my ($f,$val) = parse($l);                                       \\
      #print "F:$f, VAL:$val\n";                                      \\
      $f =~ /^(_qa_owner)$/ and do {                                  \\
         $qa = $val;                                                  \\
      };                                                              \\
      $f =~ /^(closed_on)$/ and do {                                  \\
         $cl = $val;                                                  \\
      };                                                              \\
      $f =~ /^(name)$/ and do {                                       \\
         $name = $val;                                                \\
      };                                                              \\
      $f =~ /^(_release)$/ and do {                                   \\
         $rel = $val;                                                 \\
      };                                                              \\
      $f =~ /^(_defect_type)$/ and do {                               \\
         $typ = $val;                                                 \\
      };                                                              \\
      $f =~ /^(_phase)$/ and do {                                     \\
         $ph = $val;                                                  \\
      };                                                              \\
      $f =~ /^(last_modified)$/ and do {                              \\
         $lm = $val;                                                  \\
      };                                                              \\
      $f =~ /^(_detected_in_release)$/ and do {                       \\
         $det = $val;                                                 \\
      };                                                              \\
      $f =~ /^(_severity)$/ and do {                                  \\
         $sev = $val;                                                 \\
      };                                                              \\
      $f =~ /^(_priority)$/ and do {                                  \\
         $pr = $val;                                                  \\
      };                                                              \\
    }                                                                 \\
                                                                      \\
    $rel =~ s/^9.50.+$/10.00/;                                        \\
    $rel =~ s/^(\d+)\.(\d)\s/$1.$+0 /;                                \\
    $rel =~ s/^(\d+)\.(\d)$/$1.$+0/;                                  \\
    # Remove any escaped double quotes from the title                 \\
    $name =~ s/\\"/"/g;                                               \\
    # print "ID:$id\nPH:$ph\nSEV:$sev\nREL:$rel\n".                   \\
    #       "NAM:$name\nPR:$pr\nDET:$det\nTYP:$typ\n\n";              \\
    $ids{$id} = { id          => $id,                                 \\
                  phase       => $ph,                                 \\
                  severity    => $sev,                                \\
                  release     => $rel,                                \\
                  name        => $name,                               \\
                  priority    => $pr,                                 \\
                  detected_in => $det,                                \\
                  type        => $typ };                              \\
    push @{$releases{$rel}}, $id;                                     \\
  }                                                                   \\
}                                                                     \\
my $SPACE = length("[Awaiting Decision,Critical,Very High,Enhancement]"); \\
for(sort sort_by_release keys %releases) {                            \\
  my $rel = $_;                                                       \\
  s/^.+"([\s\w\d\.]+)".*$/$1/;                                        \\
  print BOLD, YELLOW, "\nTarget Release:$_\n", RESET;                 \\
  my %defects;                                                        \\
  foreach(sort @{$releases{$rel}}) {                                  \\
    my $id = $_;                                                      \\
    my $lead = "[".$ids{$id}{phase}.                                  \\
               ",".$ids{$id}{severity}.                               \\
               ",".$ids{$id}{priority}.                               \\
               ",".$ids{$id}{type}."] ";                              \\
    my $sp = " "x($SPACE - length($lead));                            \\
    my $summary = $ids{$id}{name};                                    \\
    my $shortSum = substr $summary, 0, 80;                            \\
    if($VERBOSE) {                                                    \\
      if(length($summary) > 80) {                                     \\
        $defects{$id} = $lead.$sp.$shortSum." ...";                   \\
      }                                                               \\
      else { $defects{$id} = $lead.$sp.$summary;  }                   \\
    }                                                                 \\
    else {                                                            \\
      $defects{$id} = $summary;                                       \\
    }                                                                 \\
  }                                                                   \\
  foreach(reverse sort keys %defects) {                               \\
    print BOLD, CYAN, "  $_: ", RESET,$defects{$_}."\n";              \\
  }                                                                   \\
}                                                                     \\
' "'"

